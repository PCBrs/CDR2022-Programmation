
PCBcapteur_R1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c6c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de0  08003de0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003de0  08003de0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003de0  08003de0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003de0  08003de0  00013de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003de4  08003de4  00013de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000000c  08003df4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08003df4  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d11  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001561  00000000  00000000  00028d45  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a40  00000000  00000000  0002a2a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000988  00000000  00000000  0002ace8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000145a9  00000000  00000000  0002b670  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000071eb  00000000  00000000  0003fc19  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072a96  00000000  00000000  00046e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b989a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024b4  00000000  00000000  000b9918  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d14 	.word	0x08003d14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003d14 	.word	0x08003d14

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <ServoArr>:
void HAL_GPIO_EXTI_Callback(uint16_t Pin);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void ServoArr(uint8_t servo, uint8_t angle){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
 800022c:	1dbb      	adds	r3, r7, #6
 800022e:	1c0a      	adds	r2, r1, #0
 8000230:	701a      	strb	r2, [r3, #0]

	switch(servo){
 8000232:	1dfb      	adds	r3, r7, #7
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	2b64      	cmp	r3, #100	; 0x64
 8000238:	d000      	beq.n	800023c <ServoArr+0x1c>
		break;

	}


}
 800023a:	e010      	b.n	800025e <ServoArr+0x3e>
		if(angle=='h'){
 800023c:	1dbb      	adds	r3, r7, #6
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b68      	cmp	r3, #104	; 0x68
 8000242:	d103      	bne.n	800024c <ServoArr+0x2c>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,23);
 8000244:	4b08      	ldr	r3, [pc, #32]	; (8000268 <ServoArr+0x48>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	2217      	movs	r2, #23
 800024a:	635a      	str	r2, [r3, #52]	; 0x34
		if(angle=='b'){
 800024c:	1dbb      	adds	r3, r7, #6
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2b62      	cmp	r3, #98	; 0x62
 8000252:	d103      	bne.n	800025c <ServoArr+0x3c>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,55);
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <ServoArr+0x48>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2237      	movs	r2, #55	; 0x37
 800025a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800025c:	46c0      	nop			; (mov r8, r8)
}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	46bd      	mov	sp, r7
 8000262:	b002      	add	sp, #8
 8000264:	bd80      	pop	{r7, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	20000130 	.word	0x20000130

0800026c <ServoCot>:

static void ServoCot(uint8_t servo, uint8_t angle){
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	0002      	movs	r2, r0
 8000274:	1dfb      	adds	r3, r7, #7
 8000276:	701a      	strb	r2, [r3, #0]
 8000278:	1dbb      	adds	r3, r7, #6
 800027a:	1c0a      	adds	r2, r1, #0
 800027c:	701a      	strb	r2, [r3, #0]

	switch(servo){
 800027e:	1dfb      	adds	r3, r7, #7
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	2b64      	cmp	r3, #100	; 0x64
 8000284:	d002      	beq.n	800028c <ServoCot+0x20>
 8000286:	2b67      	cmp	r3, #103	; 0x67
 8000288:	d011      	beq.n	80002ae <ServoCot+0x42>

		break;

	}

}
 800028a:	e024      	b.n	80002d6 <ServoCot+0x6a>
		if(angle=='h')
 800028c:	1dbb      	adds	r3, r7, #6
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b68      	cmp	r3, #104	; 0x68
 8000292:	d103      	bne.n	800029c <ServoCot+0x30>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,96);//56 bas
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <ServoCot+0x74>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2260      	movs	r2, #96	; 0x60
 800029a:	635a      	str	r2, [r3, #52]	; 0x34
		if(angle=='b'){
 800029c:	1dbb      	adds	r3, r7, #6
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b62      	cmp	r3, #98	; 0x62
 80002a2:	d115      	bne.n	80002d0 <ServoCot+0x64>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,56);// 70 haut
 80002a4:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <ServoCot+0x74>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2238      	movs	r2, #56	; 0x38
 80002aa:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80002ac:	e010      	b.n	80002d0 <ServoCot+0x64>
		if(angle=='h'){
 80002ae:	1dbb      	adds	r3, r7, #6
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2b68      	cmp	r3, #104	; 0x68
 80002b4:	d103      	bne.n	80002be <ServoCot+0x52>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,70);
 80002b6:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <ServoCot+0x74>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	2246      	movs	r2, #70	; 0x46
 80002bc:	639a      	str	r2, [r3, #56]	; 0x38
		if(angle=='b'){
 80002be:	1dbb      	adds	r3, r7, #6
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	2b62      	cmp	r3, #98	; 0x62
 80002c4:	d106      	bne.n	80002d4 <ServoCot+0x68>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,105);
 80002c6:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <ServoCot+0x74>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2269      	movs	r2, #105	; 0x69
 80002cc:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80002ce:	e001      	b.n	80002d4 <ServoCot+0x68>
		break;
 80002d0:	46c0      	nop			; (mov r8, r8)
 80002d2:	e000      	b.n	80002d6 <ServoCot+0x6a>
		break;
 80002d4:	46c0      	nop			; (mov r8, r8)
}
 80002d6:	46c0      	nop			; (mov r8, r8)
 80002d8:	46bd      	mov	sp, r7
 80002da:	b002      	add	sp, #8
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	20000060 	.word	0x20000060

080002e4 <Drapeau>:

static void Drapeau()
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80002e8:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <Drapeau+0x40>)
 80002ea:	2100      	movs	r1, #0
 80002ec:	0018      	movs	r0, r3
 80002ee:	f002 ff01 	bl	80030f4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,65);
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <Drapeau+0x40>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2241      	movs	r2, #65	; 0x41
 80002f8:	635a      	str	r2, [r3, #52]	; 0x34
	while(HAL_GPIO_ReadPin(FOURCHE3_GPIO_Port,FOURCHE3_Pin)==1);
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <Drapeau+0x44>)
 80002fe:	2140      	movs	r1, #64	; 0x40
 8000300:	0018      	movs	r0, r3
 8000302:	f002 f965 	bl	80025d0 <HAL_GPIO_ReadPin>
 8000306:	0003      	movs	r3, r0
 8000308:	2b01      	cmp	r3, #1
 800030a:	d0f7      	beq.n	80002fc <Drapeau+0x18>
	HAL_Delay(5);
 800030c:	2005      	movs	r0, #5
 800030e:	f001 f893 	bl	8001438 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000312:	4b04      	ldr	r3, [pc, #16]	; (8000324 <Drapeau+0x40>)
 8000314:	2100      	movs	r1, #0
 8000316:	0018      	movs	r0, r3
 8000318:	f002 ff32 	bl	8003180 <HAL_TIM_PWM_Stop>
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	20000130 	.word	0x20000130
 8000328:	48000400 	.word	0x48000400

0800032c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000330:	f001 f81e 	bl	8001370 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000334:	f000 f908 	bl	8000548 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000338:	f000 fbde 	bl	8000af8 <MX_GPIO_Init>
	HAL_Delay(10);
 800033c:	200a      	movs	r0, #10
 800033e:	f001 f87b 	bl	8001438 <HAL_Delay>
	MX_CAN_Init();
 8000342:	f000 f949 	bl	80005d8 <MX_CAN_Init>
	HAL_Delay(10);
 8000346:	200a      	movs	r0, #10
 8000348:	f001 f876 	bl	8001438 <HAL_Delay>
	MX_TIM1_Init();
 800034c:	f000 f9e0 	bl	8000710 <MX_TIM1_Init>
	HAL_Delay(10);
 8000350:	200a      	movs	r0, #10
 8000352:	f001 f871 	bl	8001438 <HAL_Delay>
	MX_TIM2_Init();
 8000356:	f000 fa91 	bl	800087c <MX_TIM2_Init>
	HAL_Delay(10);
 800035a:	200a      	movs	r0, #10
 800035c:	f001 f86c 	bl	8001438 <HAL_Delay>
	MX_TIM3_Init();
 8000360:	f000 faee 	bl	8000940 <MX_TIM3_Init>
	HAL_Delay(10);
 8000364:	200a      	movs	r0, #10
 8000366:	f001 f867 	bl	8001438 <HAL_Delay>
	MX_TIM14_Init();
 800036a:	f000 fb59 	bl	8000a20 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(10);
 800036e:	200a      	movs	r0, #10
 8000370:	f001 f862 	bl	8001438 <HAL_Delay>
	HAL_CAN_MspInit(&hcan);
 8000374:	4b6d      	ldr	r3, [pc, #436]	; (800052c <main+0x200>)
 8000376:	0018      	movs	r0, r3
 8000378:	f000 fde4 	bl	8000f44 <HAL_CAN_MspInit>
	HAL_Delay(10);
 800037c:	200a      	movs	r0, #10
 800037e:	f001 f85b 	bl	8001438 <HAL_Delay>
	HAL_TIM_Base_Start(&htim2);
 8000382:	4b6b      	ldr	r3, [pc, #428]	; (8000530 <main+0x204>)
 8000384:	0018      	movs	r0, r3
 8000386:	f002 fe67 	bl	8003058 <HAL_TIM_Base_Start>
	HAL_Delay(10);
 800038a:	200a      	movs	r0, #10
 800038c:	f001 f854 	bl	8001438 <HAL_Delay>
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
	//__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,106);//servo arrière gauche
	HAL_Delay(10);
 8000390:	200a      	movs	r0, #10
 8000392:	f001 f851 	bl	8001438 <HAL_Delay>
	HAL_TIM_Base_Start(&htim14);
 8000396:	4b67      	ldr	r3, [pc, #412]	; (8000534 <main+0x208>)
 8000398:	0018      	movs	r0, r3
 800039a:	f002 fe5d 	bl	8003058 <HAL_TIM_Base_Start>
	HAL_Delay(10);
 800039e:	200a      	movs	r0, #10
 80003a0:	f001 f84a 	bl	8001438 <HAL_Delay>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80003a4:	4b63      	ldr	r3, [pc, #396]	; (8000534 <main+0x208>)
 80003a6:	2100      	movs	r1, #0
 80003a8:	0018      	movs	r0, r3
 80003aa:	f002 fea3 	bl	80030f4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim14,TIM_CHANNEL_1,106);// arrière droite, 106 haut 56 bas
 80003ae:	4b61      	ldr	r3, [pc, #388]	; (8000534 <main+0x208>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	226a      	movs	r2, #106	; 0x6a
 80003b4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(10);
 80003b6:	200a      	movs	r0, #10
 80003b8:	f001 f83e 	bl	8001438 <HAL_Delay>
	HAL_TIM_Base_Start(&htim3);
 80003bc:	4b5e      	ldr	r3, [pc, #376]	; (8000538 <main+0x20c>)
 80003be:	0018      	movs	r0, r3
 80003c0:	f002 fe4a 	bl	8003058 <HAL_TIM_Base_Start>
	HAL_Delay(10);
 80003c4:	200a      	movs	r0, #10
 80003c6:	f001 f837 	bl	8001438 <HAL_Delay>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80003ca:	4b5b      	ldr	r3, [pc, #364]	; (8000538 <main+0x20c>)
 80003cc:	2100      	movs	r1, #0
 80003ce:	0018      	movs	r0, r3
 80003d0:	f002 fe90 	bl	80030f4 <HAL_TIM_PWM_Start>
	//__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,106); //coté gauche
	HAL_Delay(10);
 80003d4:	200a      	movs	r0, #10
 80003d6:	f001 f82f 	bl	8001438 <HAL_Delay>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80003da:	4b57      	ldr	r3, [pc, #348]	; (8000538 <main+0x20c>)
 80003dc:	2104      	movs	r1, #4
 80003de:	0018      	movs	r0, r3
 80003e0:	f002 fe88 	bl	80030f4 <HAL_TIM_PWM_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &Rxheader,Rxmsg);
 80003e4:	4b55      	ldr	r3, [pc, #340]	; (800053c <main+0x210>)
 80003e6:	4a56      	ldr	r2, [pc, #344]	; (8000540 <main+0x214>)
 80003e8:	4850      	ldr	r0, [pc, #320]	; (800052c <main+0x200>)
 80003ea:	2100      	movs	r1, #0
 80003ec:	f001 fb5b 	bl	8001aa6 <HAL_CAN_GetRxMessage>

		msg[0]=Rxmsg[0];
 80003f0:	4b52      	ldr	r3, [pc, #328]	; (800053c <main+0x210>)
 80003f2:	781a      	ldrb	r2, [r3, #0]
 80003f4:	4b53      	ldr	r3, [pc, #332]	; (8000544 <main+0x218>)
 80003f6:	701a      	strb	r2, [r3, #0]
		msg[1]=Rxmsg[1];
 80003f8:	4b50      	ldr	r3, [pc, #320]	; (800053c <main+0x210>)
 80003fa:	785a      	ldrb	r2, [r3, #1]
 80003fc:	4b51      	ldr	r3, [pc, #324]	; (8000544 <main+0x218>)
 80003fe:	705a      	strb	r2, [r3, #1]
		msg[2]=Rxmsg[2];
 8000400:	4b4e      	ldr	r3, [pc, #312]	; (800053c <main+0x210>)
 8000402:	789a      	ldrb	r2, [r3, #2]
 8000404:	4b4f      	ldr	r3, [pc, #316]	; (8000544 <main+0x218>)
 8000406:	709a      	strb	r2, [r3, #2]
		msg[3]=Rxmsg[3];
 8000408:	4b4c      	ldr	r3, [pc, #304]	; (800053c <main+0x210>)
 800040a:	78da      	ldrb	r2, [r3, #3]
 800040c:	4b4d      	ldr	r3, [pc, #308]	; (8000544 <main+0x218>)
 800040e:	70da      	strb	r2, [r3, #3]
		msg[4]=Rxmsg[4];
 8000410:	4b4a      	ldr	r3, [pc, #296]	; (800053c <main+0x210>)
 8000412:	791a      	ldrb	r2, [r3, #4]
 8000414:	4b4b      	ldr	r3, [pc, #300]	; (8000544 <main+0x218>)
 8000416:	711a      	strb	r2, [r3, #4]
		msg[5]=Rxmsg[5];
 8000418:	4b48      	ldr	r3, [pc, #288]	; (800053c <main+0x210>)
 800041a:	795a      	ldrb	r2, [r3, #5]
 800041c:	4b49      	ldr	r3, [pc, #292]	; (8000544 <main+0x218>)
 800041e:	715a      	strb	r2, [r3, #5]
		msg[6]=Rxmsg[6];
 8000420:	4b46      	ldr	r3, [pc, #280]	; (800053c <main+0x210>)
 8000422:	799a      	ldrb	r2, [r3, #6]
 8000424:	4b47      	ldr	r3, [pc, #284]	; (8000544 <main+0x218>)
 8000426:	719a      	strb	r2, [r3, #6]
		msg[7]=Rxmsg[7];
 8000428:	4b44      	ldr	r3, [pc, #272]	; (800053c <main+0x210>)
 800042a:	79da      	ldrb	r2, [r3, #7]
 800042c:	4b45      	ldr	r3, [pc, #276]	; (8000544 <main+0x218>)
 800042e:	71da      	strb	r2, [r3, #7]

		if(msg[0]=='H'&&msg[1]=='b')
 8000430:	4b44      	ldr	r3, [pc, #272]	; (8000544 <main+0x218>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b48      	cmp	r3, #72	; 0x48
 8000436:	d10b      	bne.n	8000450 <main+0x124>
 8000438:	4b42      	ldr	r3, [pc, #264]	; (8000544 <main+0x218>)
 800043a:	785b      	ldrb	r3, [r3, #1]
 800043c:	2b62      	cmp	r3, #98	; 0x62
 800043e:	d107      	bne.n	8000450 <main+0x124>
			ServoArr(msg[2], msg[3]);
 8000440:	4b40      	ldr	r3, [pc, #256]	; (8000544 <main+0x218>)
 8000442:	789a      	ldrb	r2, [r3, #2]
 8000444:	4b3f      	ldr	r3, [pc, #252]	; (8000544 <main+0x218>)
 8000446:	78db      	ldrb	r3, [r3, #3]
 8000448:	0019      	movs	r1, r3
 800044a:	0010      	movs	r0, r2
 800044c:	f7ff fee8 	bl	8000220 <ServoArr>
		if(msg[0]=='S'&&msg[1]=='c')
 8000450:	4b3c      	ldr	r3, [pc, #240]	; (8000544 <main+0x218>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b53      	cmp	r3, #83	; 0x53
 8000456:	d10b      	bne.n	8000470 <main+0x144>
 8000458:	4b3a      	ldr	r3, [pc, #232]	; (8000544 <main+0x218>)
 800045a:	785b      	ldrb	r3, [r3, #1]
 800045c:	2b63      	cmp	r3, #99	; 0x63
 800045e:	d107      	bne.n	8000470 <main+0x144>
			ServoCot(msg[2], msg[3]);
 8000460:	4b38      	ldr	r3, [pc, #224]	; (8000544 <main+0x218>)
 8000462:	789a      	ldrb	r2, [r3, #2]
 8000464:	4b37      	ldr	r3, [pc, #220]	; (8000544 <main+0x218>)
 8000466:	78db      	ldrb	r3, [r3, #3]
 8000468:	0019      	movs	r1, r3
 800046a:	0010      	movs	r0, r2
 800046c:	f7ff fefe 	bl	800026c <ServoCot>
		if(msg[0]=='D'&&msg[1]=='p')
 8000470:	4b34      	ldr	r3, [pc, #208]	; (8000544 <main+0x218>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b44      	cmp	r3, #68	; 0x44
 8000476:	d105      	bne.n	8000484 <main+0x158>
 8000478:	4b32      	ldr	r3, [pc, #200]	; (8000544 <main+0x218>)
 800047a:	785b      	ldrb	r3, [r3, #1]
 800047c:	2b70      	cmp	r3, #112	; 0x70
 800047e:	d101      	bne.n	8000484 <main+0x158>
			Drapeau();
 8000480:	f7ff ff30 	bl	80002e4 <Drapeau>

		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO1, &Rxheader,Rxmsg);
 8000484:	4b2d      	ldr	r3, [pc, #180]	; (800053c <main+0x210>)
 8000486:	4a2e      	ldr	r2, [pc, #184]	; (8000540 <main+0x214>)
 8000488:	4828      	ldr	r0, [pc, #160]	; (800052c <main+0x200>)
 800048a:	2101      	movs	r1, #1
 800048c:	f001 fb0b 	bl	8001aa6 <HAL_CAN_GetRxMessage>

		msg[0]=Rxmsg[0];
 8000490:	4b2a      	ldr	r3, [pc, #168]	; (800053c <main+0x210>)
 8000492:	781a      	ldrb	r2, [r3, #0]
 8000494:	4b2b      	ldr	r3, [pc, #172]	; (8000544 <main+0x218>)
 8000496:	701a      	strb	r2, [r3, #0]
		msg[1]=Rxmsg[1];
 8000498:	4b28      	ldr	r3, [pc, #160]	; (800053c <main+0x210>)
 800049a:	785a      	ldrb	r2, [r3, #1]
 800049c:	4b29      	ldr	r3, [pc, #164]	; (8000544 <main+0x218>)
 800049e:	705a      	strb	r2, [r3, #1]
		msg[2]=Rxmsg[2];
 80004a0:	4b26      	ldr	r3, [pc, #152]	; (800053c <main+0x210>)
 80004a2:	789a      	ldrb	r2, [r3, #2]
 80004a4:	4b27      	ldr	r3, [pc, #156]	; (8000544 <main+0x218>)
 80004a6:	709a      	strb	r2, [r3, #2]
		msg[3]=Rxmsg[3];
 80004a8:	4b24      	ldr	r3, [pc, #144]	; (800053c <main+0x210>)
 80004aa:	78da      	ldrb	r2, [r3, #3]
 80004ac:	4b25      	ldr	r3, [pc, #148]	; (8000544 <main+0x218>)
 80004ae:	70da      	strb	r2, [r3, #3]
		msg[4]=Rxmsg[4];
 80004b0:	4b22      	ldr	r3, [pc, #136]	; (800053c <main+0x210>)
 80004b2:	791a      	ldrb	r2, [r3, #4]
 80004b4:	4b23      	ldr	r3, [pc, #140]	; (8000544 <main+0x218>)
 80004b6:	711a      	strb	r2, [r3, #4]
		msg[5]=Rxmsg[5];
 80004b8:	4b20      	ldr	r3, [pc, #128]	; (800053c <main+0x210>)
 80004ba:	795a      	ldrb	r2, [r3, #5]
 80004bc:	4b21      	ldr	r3, [pc, #132]	; (8000544 <main+0x218>)
 80004be:	715a      	strb	r2, [r3, #5]
		msg[6]=Rxmsg[6];
 80004c0:	4b1e      	ldr	r3, [pc, #120]	; (800053c <main+0x210>)
 80004c2:	799a      	ldrb	r2, [r3, #6]
 80004c4:	4b1f      	ldr	r3, [pc, #124]	; (8000544 <main+0x218>)
 80004c6:	719a      	strb	r2, [r3, #6]
		msg[7]=Rxmsg[7];
 80004c8:	4b1c      	ldr	r3, [pc, #112]	; (800053c <main+0x210>)
 80004ca:	79da      	ldrb	r2, [r3, #7]
 80004cc:	4b1d      	ldr	r3, [pc, #116]	; (8000544 <main+0x218>)
 80004ce:	71da      	strb	r2, [r3, #7]

		if(msg[0]=='H'&&msg[1]=='b')
 80004d0:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <main+0x218>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b48      	cmp	r3, #72	; 0x48
 80004d6:	d10b      	bne.n	80004f0 <main+0x1c4>
 80004d8:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <main+0x218>)
 80004da:	785b      	ldrb	r3, [r3, #1]
 80004dc:	2b62      	cmp	r3, #98	; 0x62
 80004de:	d107      	bne.n	80004f0 <main+0x1c4>
			ServoArr(msg[2], msg[3]);
 80004e0:	4b18      	ldr	r3, [pc, #96]	; (8000544 <main+0x218>)
 80004e2:	789a      	ldrb	r2, [r3, #2]
 80004e4:	4b17      	ldr	r3, [pc, #92]	; (8000544 <main+0x218>)
 80004e6:	78db      	ldrb	r3, [r3, #3]
 80004e8:	0019      	movs	r1, r3
 80004ea:	0010      	movs	r0, r2
 80004ec:	f7ff fe98 	bl	8000220 <ServoArr>
		if(msg[0]=='S'&&msg[1]=='c')
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <main+0x218>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b53      	cmp	r3, #83	; 0x53
 80004f6:	d10b      	bne.n	8000510 <main+0x1e4>
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <main+0x218>)
 80004fa:	785b      	ldrb	r3, [r3, #1]
 80004fc:	2b63      	cmp	r3, #99	; 0x63
 80004fe:	d107      	bne.n	8000510 <main+0x1e4>
			ServoCot(msg[2], msg[3]);
 8000500:	4b10      	ldr	r3, [pc, #64]	; (8000544 <main+0x218>)
 8000502:	789a      	ldrb	r2, [r3, #2]
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <main+0x218>)
 8000506:	78db      	ldrb	r3, [r3, #3]
 8000508:	0019      	movs	r1, r3
 800050a:	0010      	movs	r0, r2
 800050c:	f7ff feae 	bl	800026c <ServoCot>
		if(msg[0]=='D'&&msg[1]=='p')
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <main+0x218>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b44      	cmp	r3, #68	; 0x44
 8000516:	d000      	beq.n	800051a <main+0x1ee>
 8000518:	e764      	b.n	80003e4 <main+0xb8>
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <main+0x218>)
 800051c:	785b      	ldrb	r3, [r3, #1]
 800051e:	2b70      	cmp	r3, #112	; 0x70
 8000520:	d000      	beq.n	8000524 <main+0x1f8>
 8000522:	e75f      	b.n	80003e4 <main+0xb8>
			Drapeau();
 8000524:	f7ff fede 	bl	80002e4 <Drapeau>
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &Rxheader,Rxmsg);
 8000528:	e75c      	b.n	80003e4 <main+0xb8>
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	20000030 	.word	0x20000030
 8000530:	20000130 	.word	0x20000130
 8000534:	20000170 	.word	0x20000170
 8000538:	20000060 	.word	0x20000060
 800053c:	200000a0 	.word	0x200000a0
 8000540:	200000d0 	.word	0x200000d0
 8000544:	20000058 	.word	0x20000058

08000548 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b093      	sub	sp, #76	; 0x4c
 800054c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	2414      	movs	r4, #20
 8000550:	193b      	adds	r3, r7, r4
 8000552:	0018      	movs	r0, r3
 8000554:	2334      	movs	r3, #52	; 0x34
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f003 fbd3 	bl	8003d04 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	0018      	movs	r0, r3
 8000562:	2310      	movs	r3, #16
 8000564:	001a      	movs	r2, r3
 8000566:	2100      	movs	r1, #0
 8000568:	f003 fbcc 	bl	8003d04 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056c:	0021      	movs	r1, r4
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2201      	movs	r2, #1
 8000572:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2201      	movs	r2, #1
 8000578:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2202      	movs	r2, #2
 800057e:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	0252      	lsls	r2, r2, #9
 8000586:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	0352      	lsls	r2, r2, #13
 800058e:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	187b      	adds	r3, r7, r1
 8000598:	0018      	movs	r0, r3
 800059a:	f002 f853 	bl	8002644 <HAL_RCC_OscConfig>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x5e>
	{
		Error_Handler();
 80005a2:	f000 fca5 	bl	8000ef0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2207      	movs	r2, #7
 80005aa:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2202      	movs	r2, #2
 80005b0:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2101      	movs	r1, #1
 80005c2:	0018      	movs	r0, r3
 80005c4:	f002 fbc4 	bl	8002d50 <HAL_RCC_ClockConfig>
 80005c8:	1e03      	subs	r3, r0, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x88>
	{
		Error_Handler();
 80005cc:	f000 fc90 	bl	8000ef0 <Error_Handler>
	}
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b013      	add	sp, #76	; 0x4c
 80005d6:	bd90      	pop	{r4, r7, pc}

080005d8 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CAN_Init 0 */
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGCOMPEN;
 80005de:	4b46      	ldr	r3, [pc, #280]	; (80006f8 <MX_CAN_Init+0x120>)
 80005e0:	699a      	ldr	r2, [r3, #24]
 80005e2:	4b45      	ldr	r3, [pc, #276]	; (80006f8 <MX_CAN_Init+0x120>)
 80005e4:	2101      	movs	r1, #1
 80005e6:	430a      	orrs	r2, r1
 80005e8:	619a      	str	r2, [r3, #24]
	SYSCFG->CFGR1 |= (uint32_t)SYSCFG_CFGR1_PA11_PA12_RMP;
 80005ea:	4b44      	ldr	r3, [pc, #272]	; (80006fc <MX_CAN_Init+0x124>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	4b43      	ldr	r3, [pc, #268]	; (80006fc <MX_CAN_Init+0x124>)
 80005f0:	2110      	movs	r1, #16
 80005f2:	430a      	orrs	r2, r1
 80005f4:	601a      	str	r2, [r3, #0]

	__HAL_RCC_CAN1_CLK_ENABLE();
 80005f6:	4b40      	ldr	r3, [pc, #256]	; (80006f8 <MX_CAN_Init+0x120>)
 80005f8:	69da      	ldr	r2, [r3, #28]
 80005fa:	4b3f      	ldr	r3, [pc, #252]	; (80006f8 <MX_CAN_Init+0x120>)
 80005fc:	2180      	movs	r1, #128	; 0x80
 80005fe:	0489      	lsls	r1, r1, #18
 8000600:	430a      	orrs	r2, r1
 8000602:	61da      	str	r2, [r3, #28]
 8000604:	4b3c      	ldr	r3, [pc, #240]	; (80006f8 <MX_CAN_Init+0x120>)
 8000606:	69da      	ldr	r2, [r3, #28]
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	049b      	lsls	r3, r3, #18
 800060c:	4013      	ands	r3, r2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN;
 8000612:	4b3b      	ldr	r3, [pc, #236]	; (8000700 <MX_CAN_Init+0x128>)
 8000614:	4a3b      	ldr	r2, [pc, #236]	; (8000704 <MX_CAN_Init+0x12c>)
 8000616:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 3;
 8000618:	4b39      	ldr	r3, [pc, #228]	; (8000700 <MX_CAN_Init+0x128>)
 800061a:	2203      	movs	r2, #3
 800061c:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 800061e:	4b38      	ldr	r3, [pc, #224]	; (8000700 <MX_CAN_Init+0x128>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000624:	4b36      	ldr	r3, [pc, #216]	; (8000700 <MX_CAN_Init+0x128>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800062a:	4b35      	ldr	r3, [pc, #212]	; (8000700 <MX_CAN_Init+0x128>)
 800062c:	22c0      	movs	r2, #192	; 0xc0
 800062e:	0312      	lsls	r2, r2, #12
 8000630:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000632:	4b33      	ldr	r3, [pc, #204]	; (8000700 <MX_CAN_Init+0x128>)
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	0352      	lsls	r2, r2, #13
 8000638:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 800063a:	4b31      	ldr	r3, [pc, #196]	; (8000700 <MX_CAN_Init+0x128>)
 800063c:	2200      	movs	r2, #0
 800063e:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000640:	4b2f      	ldr	r3, [pc, #188]	; (8000700 <MX_CAN_Init+0x128>)
 8000642:	2200      	movs	r2, #0
 8000644:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000646:	4b2e      	ldr	r3, [pc, #184]	; (8000700 <MX_CAN_Init+0x128>)
 8000648:	2200      	movs	r2, #0
 800064a:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 800064c:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <MX_CAN_Init+0x128>)
 800064e:	2201      	movs	r2, #1
 8000650:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = ENABLE;
 8000652:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <MX_CAN_Init+0x128>)
 8000654:	2201      	movs	r2, #1
 8000656:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = ENABLE;
 8000658:	4b29      	ldr	r3, [pc, #164]	; (8000700 <MX_CAN_Init+0x128>)
 800065a:	2201      	movs	r2, #1
 800065c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK)
 800065e:	4b28      	ldr	r3, [pc, #160]	; (8000700 <MX_CAN_Init+0x128>)
 8000660:	0018      	movs	r0, r3
 8000662:	f000 ff0b 	bl	800147c <HAL_CAN_Init>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d000      	beq.n	800066c <MX_CAN_Init+0x94>
	{
		while(1);
 800066a:	e7fe      	b.n	800066a <MX_CAN_Init+0x92>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	filter.FilterBank = 0;
 800066c:	4b26      	ldr	r3, [pc, #152]	; (8000708 <MX_CAN_Init+0x130>)
 800066e:	2200      	movs	r2, #0
 8000670:	615a      	str	r2, [r3, #20]
	filter.FilterIdHigh=0x800;
 8000672:	4b25      	ldr	r3, [pc, #148]	; (8000708 <MX_CAN_Init+0x130>)
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	601a      	str	r2, [r3, #0]
	filter.FilterIdLow=0;
 800067a:	4b23      	ldr	r3, [pc, #140]	; (8000708 <MX_CAN_Init+0x130>)
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
	filter.FilterMaskIdHigh=0;
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <MX_CAN_Init+0x130>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
	filter.FilterMaskIdLow=0;
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <MX_CAN_Init+0x130>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
	filter.FilterMode=CAN_FILTERMODE_IDMASK;
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <MX_CAN_Init+0x130>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
	filter.FilterScale=CAN_FILTERSCALE_32BIT;
 8000692:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <MX_CAN_Init+0x130>)
 8000694:	2201      	movs	r2, #1
 8000696:	61da      	str	r2, [r3, #28]
	filter.FilterBank=CAN_FILTER_FIFO1|CAN_FILTER_FIFO0;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_CAN_Init+0x130>)
 800069a:	2201      	movs	r2, #1
 800069c:	615a      	str	r2, [r3, #20]
	filter.FilterActivation=CAN_FILTER_ENABLE;
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_CAN_Init+0x130>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	621a      	str	r2, [r3, #32]
	filter.SlaveStartFilterBank=14;
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_CAN_Init+0x130>)
 80006a6:	220e      	movs	r2, #14
 80006a8:	625a      	str	r2, [r3, #36]	; 0x24

	Txheader.StdId = 0x300;      // Détermine l'adresse du périphérique au quel la trame est destiné.
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <MX_CAN_Init+0x134>)
 80006ac:	22c0      	movs	r2, #192	; 0xc0
 80006ae:	0092      	lsls	r2, r2, #2
 80006b0:	601a      	str	r2, [r3, #0]
	// Si plusieurs périphériques sur le bus comprennent cette adresse dans leur filtre, ils recevront tous la trame.
	Txheader.ExtId = 0x0;       // Adresse étendue, non utilisée dans note cas
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_CAN_Init+0x134>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
	Txheader.RTR = CAN_RTR_DATA; // Précise que la trame contient des données
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_CAN_Init+0x134>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
	Txheader.IDE = CAN_ID_STD;   // Précise que la trame est de type Standard
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_CAN_Init+0x134>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
	Txheader.DLC = 5;            // Précise le nombre d'octets de données que la trame transporte ( De 0 à 8 )
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_CAN_Init+0x134>)
 80006c6:	2205      	movs	r2, #5
 80006c8:	611a      	str	r2, [r3, #16]
	Txheader.TransmitGlobalTime = DISABLE;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <MX_CAN_Init+0x134>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	751a      	strb	r2, [r3, #20]

	HAL_CAN_ConfigFilter(&hcan, &filter); //configure CAN filter
 80006d0:	4a0d      	ldr	r2, [pc, #52]	; (8000708 <MX_CAN_Init+0x130>)
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_CAN_Init+0x128>)
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 ffce 	bl	8001678 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan);
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_CAN_Init+0x128>)
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 f8bc 	bl	800185c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING|CAN_IT_RX_FIFO0_MSG_PENDING);
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_CAN_Init+0x128>)
 80006e6:	2112      	movs	r1, #18
 80006e8:	0018      	movs	r0, r3
 80006ea:	f001 faf8 	bl	8001cde <HAL_CAN_ActivateNotification>

	/* USER CODE END CAN_Init 2 */

}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40010000 	.word	0x40010000
 8000700:	20000030 	.word	0x20000030
 8000704:	40006400 	.word	0x40006400
 8000708:	200000a8 	.word	0x200000a8
 800070c:	200001b0 	.word	0x200001b0

08000710 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b096      	sub	sp, #88	; 0x58
 8000714:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000716:	2348      	movs	r3, #72	; 0x48
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	0018      	movs	r0, r3
 800071c:	2310      	movs	r3, #16
 800071e:	001a      	movs	r2, r3
 8000720:	2100      	movs	r1, #0
 8000722:	f003 faef 	bl	8003d04 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000726:	2340      	movs	r3, #64	; 0x40
 8000728:	18fb      	adds	r3, r7, r3
 800072a:	0018      	movs	r0, r3
 800072c:	2308      	movs	r3, #8
 800072e:	001a      	movs	r2, r3
 8000730:	2100      	movs	r1, #0
 8000732:	f003 fae7 	bl	8003d04 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000736:	2324      	movs	r3, #36	; 0x24
 8000738:	18fb      	adds	r3, r7, r3
 800073a:	0018      	movs	r0, r3
 800073c:	231c      	movs	r3, #28
 800073e:	001a      	movs	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f003 fadf 	bl	8003d04 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	0018      	movs	r0, r3
 800074a:	2320      	movs	r3, #32
 800074c:	001a      	movs	r2, r3
 800074e:	2100      	movs	r1, #0
 8000750:	f003 fad8 	bl	8003d04 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000754:	4b46      	ldr	r3, [pc, #280]	; (8000870 <MX_TIM1_Init+0x160>)
 8000756:	4a47      	ldr	r2, [pc, #284]	; (8000874 <MX_TIM1_Init+0x164>)
 8000758:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800075a:	4b45      	ldr	r3, [pc, #276]	; (8000870 <MX_TIM1_Init+0x160>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000760:	4b43      	ldr	r3, [pc, #268]	; (8000870 <MX_TIM1_Init+0x160>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000766:	4b42      	ldr	r3, [pc, #264]	; (8000870 <MX_TIM1_Init+0x160>)
 8000768:	4a43      	ldr	r2, [pc, #268]	; (8000878 <MX_TIM1_Init+0x168>)
 800076a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076c:	4b40      	ldr	r3, [pc, #256]	; (8000870 <MX_TIM1_Init+0x160>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000772:	4b3f      	ldr	r3, [pc, #252]	; (8000870 <MX_TIM1_Init+0x160>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000778:	4b3d      	ldr	r3, [pc, #244]	; (8000870 <MX_TIM1_Init+0x160>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800077e:	4b3c      	ldr	r3, [pc, #240]	; (8000870 <MX_TIM1_Init+0x160>)
 8000780:	0018      	movs	r0, r3
 8000782:	f002 fc3d 	bl	8003000 <HAL_TIM_Base_Init>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <MX_TIM1_Init+0x7e>
	{
		Error_Handler();
 800078a:	f000 fbb1 	bl	8000ef0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078e:	2148      	movs	r1, #72	; 0x48
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	0152      	lsls	r2, r2, #5
 8000796:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000798:	187a      	adds	r2, r7, r1
 800079a:	4b35      	ldr	r3, [pc, #212]	; (8000870 <MX_TIM1_Init+0x160>)
 800079c:	0011      	movs	r1, r2
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 fe04 	bl	80033ac <HAL_TIM_ConfigClockSource>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM1_Init+0x9c>
	{
		Error_Handler();
 80007a8:	f000 fba2 	bl	8000ef0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007ac:	4b30      	ldr	r3, [pc, #192]	; (8000870 <MX_TIM1_Init+0x160>)
 80007ae:	0018      	movs	r0, r3
 80007b0:	f002 fc74 	bl	800309c <HAL_TIM_PWM_Init>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM1_Init+0xac>
	{
		Error_Handler();
 80007b8:	f000 fb9a 	bl	8000ef0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007bc:	2140      	movs	r1, #64	; 0x40
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ca:	187a      	adds	r2, r7, r1
 80007cc:	4b28      	ldr	r3, [pc, #160]	; (8000870 <MX_TIM1_Init+0x160>)
 80007ce:	0011      	movs	r1, r2
 80007d0:	0018      	movs	r0, r3
 80007d2:	f003 f9bd 	bl	8003b50 <HAL_TIMEx_MasterConfigSynchronization>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM1_Init+0xce>
	{
		Error_Handler();
 80007da:	f000 fb89 	bl	8000ef0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007de:	2124      	movs	r1, #36	; 0x24
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2260      	movs	r2, #96	; 0x60
 80007e4:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800080a:	1879      	adds	r1, r7, r1
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <MX_TIM1_Init+0x160>)
 800080e:	2200      	movs	r2, #0
 8000810:	0018      	movs	r0, r3
 8000812:	f002 fd13 	bl	800323c <HAL_TIM_PWM_ConfigChannel>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <MX_TIM1_Init+0x10e>
	{
		Error_Handler();
 800081a:	f000 fb69 	bl	8000ef0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2280      	movs	r2, #128	; 0x80
 8000840:	0192      	lsls	r2, r2, #6
 8000842:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800084a:	1d3a      	adds	r2, r7, #4
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_TIM1_Init+0x160>)
 800084e:	0011      	movs	r1, r2
 8000850:	0018      	movs	r0, r3
 8000852:	f003 f9d5 	bl	8003c00 <HAL_TIMEx_ConfigBreakDeadTime>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <MX_TIM1_Init+0x14e>
	{
		Error_Handler();
 800085a:	f000 fb49 	bl	8000ef0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800085e:	4b04      	ldr	r3, [pc, #16]	; (8000870 <MX_TIM1_Init+0x160>)
 8000860:	0018      	movs	r0, r3
 8000862:	f000 fc2b 	bl	80010bc <HAL_TIM_MspPostInit>

}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b016      	add	sp, #88	; 0x58
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	200000ec 	.word	0x200000ec
 8000874:	40012c00 	.word	0x40012c00
 8000878:	0000ffff 	.word	0x0000ffff

0800087c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000882:	2320      	movs	r3, #32
 8000884:	18fb      	adds	r3, r7, r3
 8000886:	0018      	movs	r0, r3
 8000888:	2308      	movs	r3, #8
 800088a:	001a      	movs	r2, r3
 800088c:	2100      	movs	r1, #0
 800088e:	f003 fa39 	bl	8003d04 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	0018      	movs	r0, r3
 8000896:	231c      	movs	r3, #28
 8000898:	001a      	movs	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	f003 fa32 	bl	8003d04 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80008a0:	4b26      	ldr	r3, [pc, #152]	; (800093c <MX_TIM2_Init+0xc0>)
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	05d2      	lsls	r2, r2, #23
 80008a6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1000;
 80008a8:	4b24      	ldr	r3, [pc, #144]	; (800093c <MX_TIM2_Init+0xc0>)
 80008aa:	22fa      	movs	r2, #250	; 0xfa
 80008ac:	0092      	lsls	r2, r2, #2
 80008ae:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <MX_TIM2_Init+0xc0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_TIM2_Init+0xc0>)
 80008b8:	22fa      	movs	r2, #250	; 0xfa
 80008ba:	0092      	lsls	r2, r2, #2
 80008bc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_TIM2_Init+0xc0>)
 80008c0:	2280      	movs	r2, #128	; 0x80
 80008c2:	0052      	lsls	r2, r2, #1
 80008c4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_TIM2_Init+0xc0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_TIM2_Init+0xc0>)
 80008ce:	0018      	movs	r0, r3
 80008d0:	f002 fbe4 	bl	800309c <HAL_TIM_PWM_Init>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM2_Init+0x60>
	{
		Error_Handler();
 80008d8:	f000 fb0a 	bl	8000ef0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80008dc:	2120      	movs	r1, #32
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2240      	movs	r2, #64	; 0x40
 80008e2:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ea:	187a      	adds	r2, r7, r1
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_TIM2_Init+0xc0>)
 80008ee:	0011      	movs	r1, r2
 80008f0:	0018      	movs	r0, r3
 80008f2:	f003 f92d 	bl	8003b50 <HAL_TIMEx_MasterConfigSynchronization>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM2_Init+0x82>
	{
		Error_Handler();
 80008fa:	f000 faf9 	bl	8000ef0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2260      	movs	r2, #96	; 0x60
 8000902:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 500;
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	22fa      	movs	r2, #250	; 0xfa
 8000908:	0052      	lsls	r2, r2, #1
 800090a:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000918:	1d39      	adds	r1, r7, #4
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_TIM2_Init+0xc0>)
 800091c:	2200      	movs	r2, #0
 800091e:	0018      	movs	r0, r3
 8000920:	f002 fc8c 	bl	800323c <HAL_TIM_PWM_ConfigChannel>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <MX_TIM2_Init+0xb0>
	{
		Error_Handler();
 8000928:	f000 fae2 	bl	8000ef0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <MX_TIM2_Init+0xc0>)
 800092e:	0018      	movs	r0, r3
 8000930:	f000 fbc4 	bl	80010bc <HAL_TIM_MspPostInit>

}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b00a      	add	sp, #40	; 0x28
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000130 	.word	0x20000130

08000940 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000946:	2320      	movs	r3, #32
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	0018      	movs	r0, r3
 800094c:	2308      	movs	r3, #8
 800094e:	001a      	movs	r2, r3
 8000950:	2100      	movs	r1, #0
 8000952:	f003 f9d7 	bl	8003d04 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	0018      	movs	r0, r3
 800095a:	231c      	movs	r3, #28
 800095c:	001a      	movs	r2, r3
 800095e:	2100      	movs	r1, #0
 8000960:	f003 f9d0 	bl	8003d04 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000964:	4b2c      	ldr	r3, [pc, #176]	; (8000a18 <MX_TIM3_Init+0xd8>)
 8000966:	4a2d      	ldr	r2, [pc, #180]	; (8000a1c <MX_TIM3_Init+0xdc>)
 8000968:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 1000;
 800096a:	4b2b      	ldr	r3, [pc, #172]	; (8000a18 <MX_TIM3_Init+0xd8>)
 800096c:	22fa      	movs	r2, #250	; 0xfa
 800096e:	0092      	lsls	r2, r2, #2
 8000970:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b29      	ldr	r3, [pc, #164]	; (8000a18 <MX_TIM3_Init+0xd8>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000;
 8000978:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <MX_TIM3_Init+0xd8>)
 800097a:	22fa      	movs	r2, #250	; 0xfa
 800097c:	0092      	lsls	r2, r2, #2
 800097e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000980:	4b25      	ldr	r3, [pc, #148]	; (8000a18 <MX_TIM3_Init+0xd8>)
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	0052      	lsls	r2, r2, #1
 8000986:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <MX_TIM3_Init+0xd8>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800098e:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <MX_TIM3_Init+0xd8>)
 8000990:	0018      	movs	r0, r3
 8000992:	f002 fb83 	bl	800309c <HAL_TIM_PWM_Init>
 8000996:	1e03      	subs	r3, r0, #0
 8000998:	d001      	beq.n	800099e <MX_TIM3_Init+0x5e>
	{
		Error_Handler();
 800099a:	f000 faa9 	bl	8000ef0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 800099e:	2120      	movs	r1, #32
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	2240      	movs	r2, #64	; 0x40
 80009a4:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009ac:	187a      	adds	r2, r7, r1
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_TIM3_Init+0xd8>)
 80009b0:	0011      	movs	r1, r2
 80009b2:	0018      	movs	r0, r3
 80009b4:	f003 f8cc 	bl	8003b50 <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM3_Init+0x80>
	{
		Error_Handler();
 80009bc:	f000 fa98 	bl	8000ef0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2260      	movs	r2, #96	; 0x60
 80009c4:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 500;
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	22fa      	movs	r2, #250	; 0xfa
 80009ca:	0052      	lsls	r2, r2, #1
 80009cc:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009da:	1d39      	adds	r1, r7, #4
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_TIM3_Init+0xd8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	0018      	movs	r0, r3
 80009e2:	f002 fc2b 	bl	800323c <HAL_TIM_PWM_ConfigChannel>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM3_Init+0xae>
	{
		Error_Handler();
 80009ea:	f000 fa81 	bl	8000ef0 <Error_Handler>
	}
	sConfigOC.Pulse = 0;
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009f4:	1d39      	adds	r1, r7, #4
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_TIM3_Init+0xd8>)
 80009f8:	2204      	movs	r2, #4
 80009fa:	0018      	movs	r0, r3
 80009fc:	f002 fc1e 	bl	800323c <HAL_TIM_PWM_ConfigChannel>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM3_Init+0xc8>
	{
		Error_Handler();
 8000a04:	f000 fa74 	bl	8000ef0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <MX_TIM3_Init+0xd8>)
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 fb56 	bl	80010bc <HAL_TIM_MspPostInit>

}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b00a      	add	sp, #40	; 0x28
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000060 	.word	0x20000060
 8000a1c:	40000400 	.word	0x40000400

08000a20 <MX_TIM14_Init>:
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM14_Init 0 */

	/* USER CODE END TIM14_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8000a26:	230c      	movs	r3, #12
 8000a28:	18fb      	adds	r3, r7, r3
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	231c      	movs	r3, #28
 8000a2e:	001a      	movs	r2, r3
 8000a30:	2100      	movs	r1, #0
 8000a32:	f003 f967 	bl	8003d04 <memset>

	/* USER CODE BEGIN TIM14_Init 1 */
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	0018      	movs	r0, r3
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f003 f960 	bl	8003d04 <memset>
	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 8000a44:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <MX_TIM14_Init+0xd0>)
 8000a46:	4a2b      	ldr	r2, [pc, #172]	; (8000af4 <MX_TIM14_Init+0xd4>)
 8000a48:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 1000;
 8000a4a:	4b29      	ldr	r3, [pc, #164]	; (8000af0 <MX_TIM14_Init+0xd0>)
 8000a4c:	22fa      	movs	r2, #250	; 0xfa
 8000a4e:	0092      	lsls	r2, r2, #2
 8000a50:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b27      	ldr	r3, [pc, #156]	; (8000af0 <MX_TIM14_Init+0xd0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 1000;
 8000a58:	4b25      	ldr	r3, [pc, #148]	; (8000af0 <MX_TIM14_Init+0xd0>)
 8000a5a:	22fa      	movs	r2, #250	; 0xfa
 8000a5c:	0092      	lsls	r2, r2, #2
 8000a5e:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000a60:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <MX_TIM14_Init+0xd0>)
 8000a62:	2280      	movs	r2, #128	; 0x80
 8000a64:	0052      	lsls	r2, r2, #1
 8000a66:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a68:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <MX_TIM14_Init+0xd0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a6e:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <MX_TIM14_Init+0xd0>)
 8000a70:	0018      	movs	r0, r3
 8000a72:	f002 fac5 	bl	8003000 <HAL_TIM_Base_Init>
 8000a76:	1e03      	subs	r3, r0, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM14_Init+0x5e>
	{
		Error_Handler();
 8000a7a:	f000 fa39 	bl	8000ef0 <Error_Handler>
	}

	if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <MX_TIM14_Init+0xd0>)
 8000a80:	0018      	movs	r0, r3
 8000a82:	f002 fb0b 	bl	800309c <HAL_TIM_PWM_Init>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM14_Init+0x6e>
	{
		Error_Handler();
 8000a8a:	f000 fa31 	bl	8000ef0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a8e:	210c      	movs	r1, #12
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2260      	movs	r2, #96	; 0x60
 8000a94:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 500;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	22fa      	movs	r2, #250	; 0xfa
 8000a9a:	0052      	lsls	r2, r2, #1
 8000a9c:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aaa:	1879      	adds	r1, r7, r1
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <MX_TIM14_Init+0xd0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f002 fbc3 	bl	800323c <HAL_TIM_PWM_ConfigChannel>
 8000ab6:	1e03      	subs	r3, r0, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM14_Init+0x9e>
	{
		Error_Handler();
 8000aba:	f000 fa19 	bl	8000ef0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2240      	movs	r2, #64	; 0x40
 8000ac2:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig) != HAL_OK)
 8000aca:	1d3a      	adds	r2, r7, #4
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_TIM14_Init+0xd0>)
 8000ace:	0011      	movs	r1, r2
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f003 f83d 	bl	8003b50 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad6:	1e03      	subs	r3, r0, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM14_Init+0xbe>
	{
		Error_Handler();
 8000ada:	f000 fa09 	bl	8000ef0 <Error_Handler>
	}
	/* USER CODE END TIM14_Init 2 */
	HAL_TIM_MspPostInit(&htim14);
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <MX_TIM14_Init+0xd0>)
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f000 faeb 	bl	80010bc <HAL_TIM_MspPostInit>

}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b00a      	add	sp, #40	; 0x28
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	20000170 	.word	0x20000170
 8000af4:	40002000 	.word	0x40002000

08000af8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b089      	sub	sp, #36	; 0x24
 8000afc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	240c      	movs	r4, #12
 8000b00:	193b      	adds	r3, r7, r4
 8000b02:	0018      	movs	r0, r3
 8000b04:	2314      	movs	r3, #20
 8000b06:	001a      	movs	r2, r3
 8000b08:	2100      	movs	r1, #0
 8000b0a:	f003 f8fb 	bl	8003d04 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000b0e:	4b32      	ldr	r3, [pc, #200]	; (8000bd8 <MX_GPIO_Init+0xe0>)
 8000b10:	695a      	ldr	r2, [r3, #20]
 8000b12:	4b31      	ldr	r3, [pc, #196]	; (8000bd8 <MX_GPIO_Init+0xe0>)
 8000b14:	2180      	movs	r1, #128	; 0x80
 8000b16:	03c9      	lsls	r1, r1, #15
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	615a      	str	r2, [r3, #20]
 8000b1c:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <MX_GPIO_Init+0xe0>)
 8000b1e:	695a      	ldr	r2, [r3, #20]
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	03db      	lsls	r3, r3, #15
 8000b24:	4013      	ands	r3, r2
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <MX_GPIO_Init+0xe0>)
 8000b2c:	695a      	ldr	r2, [r3, #20]
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <MX_GPIO_Init+0xe0>)
 8000b30:	2180      	movs	r1, #128	; 0x80
 8000b32:	0289      	lsls	r1, r1, #10
 8000b34:	430a      	orrs	r2, r1
 8000b36:	615a      	str	r2, [r3, #20]
 8000b38:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <MX_GPIO_Init+0xe0>)
 8000b3a:	695a      	ldr	r2, [r3, #20]
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	029b      	lsls	r3, r3, #10
 8000b40:	4013      	ands	r3, r2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <MX_GPIO_Init+0xe0>)
 8000b48:	695a      	ldr	r2, [r3, #20]
 8000b4a:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <MX_GPIO_Init+0xe0>)
 8000b4c:	2180      	movs	r1, #128	; 0x80
 8000b4e:	02c9      	lsls	r1, r1, #11
 8000b50:	430a      	orrs	r2, r1
 8000b52:	615a      	str	r2, [r3, #20]
 8000b54:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <MX_GPIO_Init+0xe0>)
 8000b56:	695a      	ldr	r2, [r3, #20]
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	02db      	lsls	r3, r3, #11
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pins : IFM1_Pin IFM2_Pin IFM3_Pin IFM4_Pin */
	GPIO_InitStruct.Pin = IFM1_Pin|IFM2_Pin|IFM3_Pin|IFM4_Pin;
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	220f      	movs	r2, #15
 8000b66:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	4a1c      	ldr	r2, [pc, #112]	; (8000bdc <MX_GPIO_Init+0xe4>)
 8000b6c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2202      	movs	r2, #2
 8000b72:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	193a      	adds	r2, r7, r4
 8000b76:	2390      	movs	r3, #144	; 0x90
 8000b78:	05db      	lsls	r3, r3, #23
 8000b7a:	0011      	movs	r1, r2
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f001 fbbf 	bl	8002300 <HAL_GPIO_Init>

	/*Configure GPIO pins : FOURCHE1_Pin FOURCHE2_Pin FOURCHE3_Pin FOURCHE4_Pin */
	GPIO_InitStruct.Pin = FOURCHE1_Pin|FOURCHE2_Pin|FOURCHE3_Pin|FOURCHE4_Pin;
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	22f0      	movs	r2, #240	; 0xf0
 8000b86:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b88:	193b      	adds	r3, r7, r4
 8000b8a:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <MX_GPIO_Init+0xe4>)
 8000b8c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	2202      	movs	r2, #2
 8000b92:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_GPIO_Init+0xe8>)
 8000b98:	0019      	movs	r1, r3
 8000b9a:	0010      	movs	r0, r2
 8000b9c:	f001 fbb0 	bl	8002300 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2005      	movs	r0, #5
 8000ba6:	f001 fb79 	bl	800229c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000baa:	2005      	movs	r0, #5
 8000bac:	f001 fb8b 	bl	80022c6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2006      	movs	r0, #6
 8000bb6:	f001 fb71 	bl	800229c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000bba:	2006      	movs	r0, #6
 8000bbc:	f001 fb83 	bl	80022c6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2007      	movs	r0, #7
 8000bc6:	f001 fb69 	bl	800229c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000bca:	2007      	movs	r0, #7
 8000bcc:	f001 fb7b 	bl	80022c6 <HAL_NVIC_EnableIRQ>

}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b009      	add	sp, #36	; 0x24
 8000bd6:	bd90      	pop	{r4, r7, pc}
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	10110000 	.word	0x10110000
 8000be0:	48000400 	.word	0x48000400

08000be4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rxheader,Rxmsg);
 8000bec:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000bee:	4a2e      	ldr	r2, [pc, #184]	; (8000ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	f000 ff57 	bl	8001aa6 <HAL_CAN_GetRxMessage>
	uint8_t msg[8];
	msg[0]=Rxmsg[0];
 8000bf8:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000bfa:	781a      	ldrb	r2, [r3, #0]
 8000bfc:	2108      	movs	r1, #8
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	701a      	strb	r2, [r3, #0]
	msg[1]=Rxmsg[1];
 8000c02:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000c04:	785a      	ldrb	r2, [r3, #1]
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	705a      	strb	r2, [r3, #1]
	msg[2]=Rxmsg[2];
 8000c0a:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000c0c:	789a      	ldrb	r2, [r3, #2]
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	709a      	strb	r2, [r3, #2]
	msg[3]=Rxmsg[3];
 8000c12:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000c14:	78da      	ldrb	r2, [r3, #3]
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	70da      	strb	r2, [r3, #3]
	msg[4]=Rxmsg[4];
 8000c1a:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000c1c:	791a      	ldrb	r2, [r3, #4]
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	711a      	strb	r2, [r3, #4]
	msg[5]=Rxmsg[5];
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000c24:	795a      	ldrb	r2, [r3, #5]
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	715a      	strb	r2, [r3, #5]
	msg[6]=Rxmsg[6];
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000c2c:	799a      	ldrb	r2, [r3, #6]
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	719a      	strb	r2, [r3, #6]
	msg[7]=Rxmsg[7];
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8000c34:	79da      	ldrb	r2, [r3, #7]
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	71da      	strb	r2, [r3, #7]

	if(msg[0]=='H'&&msg[1]=='b')
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b48      	cmp	r3, #72	; 0x48
 8000c40:	d10d      	bne.n	8000c5e <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
 8000c42:	2308      	movs	r3, #8
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	785b      	ldrb	r3, [r3, #1]
 8000c48:	2b62      	cmp	r3, #98	; 0x62
 8000c4a:	d108      	bne.n	8000c5e <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
		ServoArr(msg[2], msg[3]);
 8000c4c:	2108      	movs	r1, #8
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	789a      	ldrb	r2, [r3, #2]
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	78db      	ldrb	r3, [r3, #3]
 8000c56:	0019      	movs	r1, r3
 8000c58:	0010      	movs	r0, r2
 8000c5a:	f7ff fae1 	bl	8000220 <ServoArr>
	if(msg[0]=='S'&&msg[1]=='c')
 8000c5e:	2308      	movs	r3, #8
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b53      	cmp	r3, #83	; 0x53
 8000c66:	d10d      	bne.n	8000c84 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
 8000c68:	2308      	movs	r3, #8
 8000c6a:	18fb      	adds	r3, r7, r3
 8000c6c:	785b      	ldrb	r3, [r3, #1]
 8000c6e:	2b63      	cmp	r3, #99	; 0x63
 8000c70:	d108      	bne.n	8000c84 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
		ServoCot(msg[2], msg[3]);
 8000c72:	2108      	movs	r1, #8
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	789a      	ldrb	r2, [r3, #2]
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	78db      	ldrb	r3, [r3, #3]
 8000c7c:	0019      	movs	r1, r3
 8000c7e:	0010      	movs	r0, r2
 8000c80:	f7ff faf4 	bl	800026c <ServoCot>
	if(msg[0]=='D'&&msg[1]=='p')
 8000c84:	2308      	movs	r3, #8
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b44      	cmp	r3, #68	; 0x44
 8000c8c:	d106      	bne.n	8000c9c <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
 8000c8e:	2308      	movs	r3, #8
 8000c90:	18fb      	adds	r3, r7, r3
 8000c92:	785b      	ldrb	r3, [r3, #1]
 8000c94:	2b70      	cmp	r3, #112	; 0x70
 8000c96:	d101      	bne.n	8000c9c <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
		Drapeau();
 8000c98:	f7ff fb24 	bl	80002e4 <Drapeau>
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b004      	add	sp, #16
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200000a0 	.word	0x200000a0
 8000ca8:	200000d0 	.word	0x200000d0

08000cac <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &Rxheader,Rxmsg);
 8000cb4:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000cb6:	4a2e      	ldr	r2, [pc, #184]	; (8000d70 <HAL_CAN_RxFifo1MsgPendingCallback+0xc4>)
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	2101      	movs	r1, #1
 8000cbc:	f000 fef3 	bl	8001aa6 <HAL_CAN_GetRxMessage>
	uint8_t msg[8];
	msg[0]=Rxmsg[0];
 8000cc0:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000cc2:	781a      	ldrb	r2, [r3, #0]
 8000cc4:	2108      	movs	r1, #8
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	701a      	strb	r2, [r3, #0]
	msg[1]=Rxmsg[1];
 8000cca:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000ccc:	785a      	ldrb	r2, [r3, #1]
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	705a      	strb	r2, [r3, #1]
	msg[2]=Rxmsg[2];
 8000cd2:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000cd4:	789a      	ldrb	r2, [r3, #2]
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	709a      	strb	r2, [r3, #2]
	msg[3]=Rxmsg[3];
 8000cda:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000cdc:	78da      	ldrb	r2, [r3, #3]
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	70da      	strb	r2, [r3, #3]
	msg[4]=Rxmsg[4];
 8000ce2:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000ce4:	791a      	ldrb	r2, [r3, #4]
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	711a      	strb	r2, [r3, #4]
	msg[5]=Rxmsg[5];
 8000cea:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000cec:	795a      	ldrb	r2, [r3, #5]
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	715a      	strb	r2, [r3, #5]
	msg[6]=Rxmsg[6];
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000cf4:	799a      	ldrb	r2, [r3, #6]
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	719a      	strb	r2, [r3, #6]
	msg[7]=Rxmsg[7];
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8000cfc:	79da      	ldrb	r2, [r3, #7]
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	71da      	strb	r2, [r3, #7]

	if(msg[0]=='H'&&msg[1]=='b')
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b48      	cmp	r3, #72	; 0x48
 8000d08:	d10d      	bne.n	8000d26 <HAL_CAN_RxFifo1MsgPendingCallback+0x7a>
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	785b      	ldrb	r3, [r3, #1]
 8000d10:	2b62      	cmp	r3, #98	; 0x62
 8000d12:	d108      	bne.n	8000d26 <HAL_CAN_RxFifo1MsgPendingCallback+0x7a>
		ServoArr(msg[2], msg[3]);
 8000d14:	2108      	movs	r1, #8
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	789a      	ldrb	r2, [r3, #2]
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	78db      	ldrb	r3, [r3, #3]
 8000d1e:	0019      	movs	r1, r3
 8000d20:	0010      	movs	r0, r2
 8000d22:	f7ff fa7d 	bl	8000220 <ServoArr>
	if(msg[0]=='S'&&msg[1]=='c')
 8000d26:	2308      	movs	r3, #8
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b53      	cmp	r3, #83	; 0x53
 8000d2e:	d10d      	bne.n	8000d4c <HAL_CAN_RxFifo1MsgPendingCallback+0xa0>
 8000d30:	2308      	movs	r3, #8
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	785b      	ldrb	r3, [r3, #1]
 8000d36:	2b63      	cmp	r3, #99	; 0x63
 8000d38:	d108      	bne.n	8000d4c <HAL_CAN_RxFifo1MsgPendingCallback+0xa0>
		ServoCot(msg[2], msg[3]);
 8000d3a:	2108      	movs	r1, #8
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	789a      	ldrb	r2, [r3, #2]
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	78db      	ldrb	r3, [r3, #3]
 8000d44:	0019      	movs	r1, r3
 8000d46:	0010      	movs	r0, r2
 8000d48:	f7ff fa90 	bl	800026c <ServoCot>
	if(msg[0]=='D'&&msg[1]=='p')
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b44      	cmp	r3, #68	; 0x44
 8000d54:	d106      	bne.n	8000d64 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>
 8000d56:	2308      	movs	r3, #8
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	785b      	ldrb	r3, [r3, #1]
 8000d5c:	2b70      	cmp	r3, #112	; 0x70
 8000d5e:	d101      	bne.n	8000d64 <HAL_CAN_RxFifo1MsgPendingCallback+0xb8>
		Drapeau();
 8000d60:	f7ff fac0 	bl	80002e4 <Drapeau>
}
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b004      	add	sp, #16
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200000a0 	.word	0x200000a0
 8000d70:	200000d0 	.word	0x200000d0

08000d74 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t Pin){// rajouter anti double message
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	0002      	movs	r2, r0
 8000d7c:	1dbb      	adds	r3, r7, #6
 8000d7e:	801a      	strh	r2, [r3, #0]
	uint8_t msg[8];
	TimeNew=HAL_GetTick();
 8000d80:	f000 fb50 	bl	8001424 <HAL_GetTick>
 8000d84:	0002      	movs	r2, r0
 8000d86:	4b54      	ldr	r3, [pc, #336]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x164>)
 8000d88:	601a      	str	r2, [r3, #0]
	if((TimeNew-TimeOld)>50){
 8000d8a:	4b53      	ldr	r3, [pc, #332]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x164>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4b53      	ldr	r3, [pc, #332]	; (8000edc <HAL_GPIO_EXTI_Callback+0x168>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b32      	cmp	r3, #50	; 0x32
 8000d96:	d800      	bhi.n	8000d9a <HAL_GPIO_EXTI_Callback+0x26>
 8000d98:	e099      	b.n	8000ece <HAL_GPIO_EXTI_Callback+0x15a>
		switch(Pin){
 8000d9a:	1dbb      	adds	r3, r7, #6
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	2b20      	cmp	r3, #32
 8000da0:	d900      	bls.n	8000da4 <HAL_GPIO_EXTI_Callback+0x30>
 8000da2:	e094      	b.n	8000ece <HAL_GPIO_EXTI_Callback+0x15a>
 8000da4:	009a      	lsls	r2, r3, #2
 8000da6:	4b4e      	ldr	r3, [pc, #312]	; (8000ee0 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000da8:	18d3      	adds	r3, r2, r3
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	469f      	mov	pc, r3
		case IFM1_Pin:
			msg[0]='R';// I pour indication
 8000dae:	2108      	movs	r1, #8
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2252      	movs	r2, #82	; 0x52
 8000db4:	701a      	strb	r2, [r3, #0]
			msg[1]='r';// r pour recalage
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2272      	movs	r2, #114	; 0x72
 8000dba:	705a      	strb	r2, [r3, #1]
			msg[2]='r';// r pour arrière (v pour avant)
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2272      	movs	r2, #114	; 0x72
 8000dc0:	709a      	strb	r2, [r3, #2]
			msg[3]='g';// d pour droite (g pour gauche)
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2267      	movs	r2, #103	; 0x67
 8000dc6:	70da      	strb	r2, [r3, #3]
			HAL_CAN_AddTxMessage(&hcan, &Txheader, msg, &TxMailbox);
 8000dc8:	4b46      	ldr	r3, [pc, #280]	; (8000ee4 <HAL_GPIO_EXTI_Callback+0x170>)
 8000dca:	187a      	adds	r2, r7, r1
 8000dcc:	4946      	ldr	r1, [pc, #280]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x174>)
 8000dce:	4847      	ldr	r0, [pc, #284]	; (8000eec <HAL_GPIO_EXTI_Callback+0x178>)
 8000dd0:	f000 fd8a 	bl	80018e8 <HAL_CAN_AddTxMessage>
			TimeOld=HAL_GetTick();
 8000dd4:	f000 fb26 	bl	8001424 <HAL_GetTick>
 8000dd8:	0002      	movs	r2, r0
 8000dda:	4b40      	ldr	r3, [pc, #256]	; (8000edc <HAL_GPIO_EXTI_Callback+0x168>)
 8000ddc:	601a      	str	r2, [r3, #0]
			break;
 8000dde:	e076      	b.n	8000ece <HAL_GPIO_EXTI_Callback+0x15a>
		case IFM2_Pin:
			msg[0]='R';// I pour indication
 8000de0:	2108      	movs	r1, #8
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2252      	movs	r2, #82	; 0x52
 8000de6:	701a      	strb	r2, [r3, #0]
			msg[1]='r';// r pour recalage
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2272      	movs	r2, #114	; 0x72
 8000dec:	705a      	strb	r2, [r3, #1]
			msg[2]='r';// r pour arrière (v pour avant)
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2272      	movs	r2, #114	; 0x72
 8000df2:	709a      	strb	r2, [r3, #2]
			msg[3]='d';// d pour droite (g pour gauche)
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2264      	movs	r2, #100	; 0x64
 8000df8:	70da      	strb	r2, [r3, #3]
			HAL_CAN_AddTxMessage(&hcan, &Txheader, msg, &TxMailbox);
 8000dfa:	4b3a      	ldr	r3, [pc, #232]	; (8000ee4 <HAL_GPIO_EXTI_Callback+0x170>)
 8000dfc:	187a      	adds	r2, r7, r1
 8000dfe:	493a      	ldr	r1, [pc, #232]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x174>)
 8000e00:	483a      	ldr	r0, [pc, #232]	; (8000eec <HAL_GPIO_EXTI_Callback+0x178>)
 8000e02:	f000 fd71 	bl	80018e8 <HAL_CAN_AddTxMessage>
			TimeOld=HAL_GetTick();
 8000e06:	f000 fb0d 	bl	8001424 <HAL_GetTick>
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	4b33      	ldr	r3, [pc, #204]	; (8000edc <HAL_GPIO_EXTI_Callback+0x168>)
 8000e0e:	601a      	str	r2, [r3, #0]
			break;
 8000e10:	e05d      	b.n	8000ece <HAL_GPIO_EXTI_Callback+0x15a>
		case IFM3_Pin:
			msg[0]='R';// I pour indication
 8000e12:	2108      	movs	r1, #8
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2252      	movs	r2, #82	; 0x52
 8000e18:	701a      	strb	r2, [r3, #0]
			msg[1]='r';// r pour recalage
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2272      	movs	r2, #114	; 0x72
 8000e1e:	705a      	strb	r2, [r3, #1]
			msg[2]='v';// r pour arrière (v pour avant)
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2276      	movs	r2, #118	; 0x76
 8000e24:	709a      	strb	r2, [r3, #2]
			msg[3]='g';// d pour droite (g pour gauche)
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2267      	movs	r2, #103	; 0x67
 8000e2a:	70da      	strb	r2, [r3, #3]
			HAL_CAN_AddTxMessage(&hcan, &Txheader, msg, &TxMailbox);
 8000e2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <HAL_GPIO_EXTI_Callback+0x170>)
 8000e2e:	187a      	adds	r2, r7, r1
 8000e30:	492d      	ldr	r1, [pc, #180]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x174>)
 8000e32:	482e      	ldr	r0, [pc, #184]	; (8000eec <HAL_GPIO_EXTI_Callback+0x178>)
 8000e34:	f000 fd58 	bl	80018e8 <HAL_CAN_AddTxMessage>
			TimeOld=HAL_GetTick();
 8000e38:	f000 faf4 	bl	8001424 <HAL_GetTick>
 8000e3c:	0002      	movs	r2, r0
 8000e3e:	4b27      	ldr	r3, [pc, #156]	; (8000edc <HAL_GPIO_EXTI_Callback+0x168>)
 8000e40:	601a      	str	r2, [r3, #0]
			break;
 8000e42:	e044      	b.n	8000ece <HAL_GPIO_EXTI_Callback+0x15a>
		case IFM4_Pin:
			msg[0]='R';// I pour indication
 8000e44:	2108      	movs	r1, #8
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2252      	movs	r2, #82	; 0x52
 8000e4a:	701a      	strb	r2, [r3, #0]
			msg[1]='r';// r pour recalage
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2272      	movs	r2, #114	; 0x72
 8000e50:	705a      	strb	r2, [r3, #1]
			msg[2]='v';// r pour arrière (v pour avant)
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	2276      	movs	r2, #118	; 0x76
 8000e56:	709a      	strb	r2, [r3, #2]
			msg[3]='d';// d pour droite (g pour gauche)
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	2264      	movs	r2, #100	; 0x64
 8000e5c:	70da      	strb	r2, [r3, #3]
			HAL_CAN_AddTxMessage(&hcan, &Txheader, msg, &TxMailbox);
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <HAL_GPIO_EXTI_Callback+0x170>)
 8000e60:	187a      	adds	r2, r7, r1
 8000e62:	4921      	ldr	r1, [pc, #132]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x174>)
 8000e64:	4821      	ldr	r0, [pc, #132]	; (8000eec <HAL_GPIO_EXTI_Callback+0x178>)
 8000e66:	f000 fd3f 	bl	80018e8 <HAL_CAN_AddTxMessage>
			TimeOld=HAL_GetTick();
 8000e6a:	f000 fadb 	bl	8001424 <HAL_GetTick>
 8000e6e:	0002      	movs	r2, r0
 8000e70:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <HAL_GPIO_EXTI_Callback+0x168>)
 8000e72:	601a      	str	r2, [r3, #0]
			break;
 8000e74:	e02b      	b.n	8000ece <HAL_GPIO_EXTI_Callback+0x15a>
		case FOURCHE1_Pin: //Drapeau haut
			msg[0]='R';// I pour indication
 8000e76:	2108      	movs	r1, #8
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2252      	movs	r2, #82	; 0x52
 8000e7c:	701a      	strb	r2, [r3, #0]
			msg[1]='d';// drapeau
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	2264      	movs	r2, #100	; 0x64
 8000e82:	705a      	strb	r2, [r3, #1]
			msg[2]='h';// h pour haut b pour bas
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	2268      	movs	r2, #104	; 0x68
 8000e88:	709a      	strb	r2, [r3, #2]
			HAL_CAN_AddTxMessage(&hcan, &Txheader, msg, &TxMailbox);
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <HAL_GPIO_EXTI_Callback+0x170>)
 8000e8c:	187a      	adds	r2, r7, r1
 8000e8e:	4916      	ldr	r1, [pc, #88]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x174>)
 8000e90:	4816      	ldr	r0, [pc, #88]	; (8000eec <HAL_GPIO_EXTI_Callback+0x178>)
 8000e92:	f000 fd29 	bl	80018e8 <HAL_CAN_AddTxMessage>
			TimeOld=HAL_GetTick();
 8000e96:	f000 fac5 	bl	8001424 <HAL_GetTick>
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_GPIO_EXTI_Callback+0x168>)
 8000e9e:	601a      	str	r2, [r3, #0]
			break;
 8000ea0:	e015      	b.n	8000ece <HAL_GPIO_EXTI_Callback+0x15a>
		case FOURCHE2_Pin://drapeau bas
			msg[0]='R';// I pour indication
 8000ea2:	2108      	movs	r1, #8
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2252      	movs	r2, #82	; 0x52
 8000ea8:	701a      	strb	r2, [r3, #0]
			msg[1]='d';// drapeau
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2264      	movs	r2, #100	; 0x64
 8000eae:	705a      	strb	r2, [r3, #1]
			msg[2]='b';// h pour haut b pour bas
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2262      	movs	r2, #98	; 0x62
 8000eb4:	709a      	strb	r2, [r3, #2]
			HAL_CAN_AddTxMessage(&hcan, &Txheader, msg, &TxMailbox);
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_GPIO_EXTI_Callback+0x170>)
 8000eb8:	187a      	adds	r2, r7, r1
 8000eba:	490b      	ldr	r1, [pc, #44]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x174>)
 8000ebc:	480b      	ldr	r0, [pc, #44]	; (8000eec <HAL_GPIO_EXTI_Callback+0x178>)
 8000ebe:	f000 fd13 	bl	80018e8 <HAL_CAN_AddTxMessage>
			TimeOld=HAL_GetTick();
 8000ec2:	f000 faaf 	bl	8001424 <HAL_GetTick>
 8000ec6:	0002      	movs	r2, r0
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <HAL_GPIO_EXTI_Callback+0x168>)
 8000eca:	601a      	str	r2, [r3, #0]
			break;
 8000ecc:	46c0      	nop			; (mov r8, r8)
		}
	}


}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b004      	add	sp, #16
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	2000002c 	.word	0x2000002c
 8000edc:	20000028 	.word	0x20000028
 8000ee0:	08003d4c 	.word	0x08003d4c
 8000ee4:	2000012c 	.word	0x2000012c
 8000ee8:	200001b0 	.word	0x200001b0
 8000eec:	20000030 	.word	0x20000030

08000ef0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000ef4:	46c0      	nop			; (mov r8, r8)
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_MspInit+0x44>)
 8000f04:	699a      	ldr	r2, [r3, #24]
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_MspInit+0x44>)
 8000f08:	2101      	movs	r1, #1
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	619a      	str	r2, [r3, #24]
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <HAL_MspInit+0x44>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	2201      	movs	r2, #1
 8000f14:	4013      	ands	r3, r2
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <HAL_MspInit+0x44>)
 8000f1c:	69da      	ldr	r2, [r3, #28]
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_MspInit+0x44>)
 8000f20:	2180      	movs	r1, #128	; 0x80
 8000f22:	0549      	lsls	r1, r1, #21
 8000f24:	430a      	orrs	r2, r1
 8000f26:	61da      	str	r2, [r3, #28]
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_MspInit+0x44>)
 8000f2a:	69da      	ldr	r2, [r3, #28]
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	055b      	lsls	r3, r3, #21
 8000f30:	4013      	ands	r3, r2
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b002      	add	sp, #8
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	40021000 	.word	0x40021000

08000f44 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	2314      	movs	r3, #20
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	0018      	movs	r0, r3
 8000f52:	2314      	movs	r3, #20
 8000f54:	001a      	movs	r2, r3
 8000f56:	2100      	movs	r1, #0
 8000f58:	f002 fed4 	bl	8003d04 <memset>
  if(hcan->Instance==CAN)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <HAL_CAN_MspInit+0xa4>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d13b      	bne.n	8000fde <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <HAL_CAN_MspInit+0xa8>)
 8000f68:	69da      	ldr	r2, [r3, #28]
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <HAL_CAN_MspInit+0xa8>)
 8000f6c:	2180      	movs	r1, #128	; 0x80
 8000f6e:	0489      	lsls	r1, r1, #18
 8000f70:	430a      	orrs	r2, r1
 8000f72:	61da      	str	r2, [r3, #28]
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <HAL_CAN_MspInit+0xa8>)
 8000f76:	69da      	ldr	r2, [r3, #28]
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	049b      	lsls	r3, r3, #18
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <HAL_CAN_MspInit+0xa8>)
 8000f84:	695a      	ldr	r2, [r3, #20]
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <HAL_CAN_MspInit+0xa8>)
 8000f88:	2180      	movs	r1, #128	; 0x80
 8000f8a:	0289      	lsls	r1, r1, #10
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	615a      	str	r2, [r3, #20]
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <HAL_CAN_MspInit+0xa8>)
 8000f92:	695a      	ldr	r2, [r3, #20]
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	029b      	lsls	r3, r3, #10
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f9e:	2114      	movs	r1, #20
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	22c0      	movs	r2, #192	; 0xc0
 8000fa4:	0152      	lsls	r2, r2, #5
 8000fa6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	2202      	movs	r2, #2
 8000fac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	187a      	adds	r2, r7, r1
 8000fc2:	2390      	movs	r3, #144	; 0x90
 8000fc4:	05db      	lsls	r3, r3, #23
 8000fc6:	0011      	movs	r1, r2
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f001 f999 	bl	8002300 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	201e      	movs	r0, #30
 8000fd4:	f001 f962 	bl	800229c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000fd8:	201e      	movs	r0, #30
 8000fda:	f001 f974 	bl	80022c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	b00a      	add	sp, #40	; 0x28
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	40006400 	.word	0x40006400
 8000fec:	40021000 	.word	0x40021000

08000ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <HAL_TIM_Base_MspInit+0x60>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d10e      	bne.n	8001020 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_TIM_Base_MspInit+0x64>)
 8001004:	699a      	ldr	r2, [r3, #24]
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <HAL_TIM_Base_MspInit+0x64>)
 8001008:	2180      	movs	r1, #128	; 0x80
 800100a:	0109      	lsls	r1, r1, #4
 800100c:	430a      	orrs	r2, r1
 800100e:	619a      	str	r2, [r3, #24]
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <HAL_TIM_Base_MspInit+0x64>)
 8001012:	699a      	ldr	r2, [r3, #24]
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	011b      	lsls	r3, r3, #4
 8001018:	4013      	ands	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800101e:	e012      	b.n	8001046 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM14)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0c      	ldr	r2, [pc, #48]	; (8001058 <HAL_TIM_Base_MspInit+0x68>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d10d      	bne.n	8001046 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_TIM_Base_MspInit+0x64>)
 800102c:	69da      	ldr	r2, [r3, #28]
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <HAL_TIM_Base_MspInit+0x64>)
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	0049      	lsls	r1, r1, #1
 8001034:	430a      	orrs	r2, r1
 8001036:	61da      	str	r2, [r3, #28]
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_TIM_Base_MspInit+0x64>)
 800103a:	69da      	ldr	r2, [r3, #28]
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4013      	ands	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b004      	add	sp, #16
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	40012c00 	.word	0x40012c00
 8001054:	40021000 	.word	0x40021000
 8001058:	40002000 	.word	0x40002000

0800105c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	05db      	lsls	r3, r3, #23
 800106c:	429a      	cmp	r2, r3
 800106e:	d10c      	bne.n	800108a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_TIM_PWM_MspInit+0x58>)
 8001072:	69da      	ldr	r2, [r3, #28]
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <HAL_TIM_PWM_MspInit+0x58>)
 8001076:	2101      	movs	r1, #1
 8001078:	430a      	orrs	r2, r1
 800107a:	61da      	str	r2, [r3, #28]
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_TIM_PWM_MspInit+0x58>)
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	2201      	movs	r2, #1
 8001082:	4013      	ands	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001088:	e010      	b.n	80010ac <HAL_TIM_PWM_MspInit+0x50>
  else if(htim_pwm->Instance==TIM3)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d10b      	bne.n	80010ac <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <HAL_TIM_PWM_MspInit+0x58>)
 8001096:	69da      	ldr	r2, [r3, #28]
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_TIM_PWM_MspInit+0x58>)
 800109a:	2102      	movs	r1, #2
 800109c:	430a      	orrs	r2, r1
 800109e:	61da      	str	r2, [r3, #28]
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <HAL_TIM_PWM_MspInit+0x58>)
 80010a2:	69db      	ldr	r3, [r3, #28]
 80010a4:	2202      	movs	r2, #2
 80010a6:	4013      	ands	r3, r2
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
}
 80010ac:	46c0      	nop			; (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b004      	add	sp, #16
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000
 80010b8:	40000400 	.word	0x40000400

080010bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08c      	sub	sp, #48	; 0x30
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	231c      	movs	r3, #28
 80010c6:	18fb      	adds	r3, r7, r3
 80010c8:	0018      	movs	r0, r3
 80010ca:	2314      	movs	r3, #20
 80010cc:	001a      	movs	r2, r3
 80010ce:	2100      	movs	r1, #0
 80010d0:	f002 fe18 	bl	8003d04 <memset>
  if(htim->Instance==TIM1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a57      	ldr	r2, [pc, #348]	; (8001238 <HAL_TIM_MspPostInit+0x17c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d126      	bne.n	800112c <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	4b57      	ldr	r3, [pc, #348]	; (800123c <HAL_TIM_MspPostInit+0x180>)
 80010e0:	695a      	ldr	r2, [r3, #20]
 80010e2:	4b56      	ldr	r3, [pc, #344]	; (800123c <HAL_TIM_MspPostInit+0x180>)
 80010e4:	2180      	movs	r1, #128	; 0x80
 80010e6:	0289      	lsls	r1, r1, #10
 80010e8:	430a      	orrs	r2, r1
 80010ea:	615a      	str	r2, [r3, #20]
 80010ec:	4b53      	ldr	r3, [pc, #332]	; (800123c <HAL_TIM_MspPostInit+0x180>)
 80010ee:	695a      	ldr	r2, [r3, #20]
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	029b      	lsls	r3, r3, #10
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010fa:	211c      	movs	r1, #28
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	2280      	movs	r2, #128	; 0x80
 8001100:	0052      	lsls	r2, r2, #1
 8001102:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	187b      	adds	r3, r7, r1
 8001106:	2202      	movs	r2, #2
 8001108:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	187b      	adds	r3, r7, r1
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	187b      	adds	r3, r7, r1
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001116:	187b      	adds	r3, r7, r1
 8001118:	2202      	movs	r2, #2
 800111a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	187a      	adds	r2, r7, r1
 800111e:	2390      	movs	r3, #144	; 0x90
 8001120:	05db      	lsls	r3, r3, #23
 8001122:	0011      	movs	r1, r2
 8001124:	0018      	movs	r0, r3
 8001126:	f001 f8eb 	bl	8002300 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800112a:	e080      	b.n	800122e <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	05db      	lsls	r3, r3, #23
 8001134:	429a      	cmp	r2, r3
 8001136:	d125      	bne.n	8001184 <HAL_TIM_MspPostInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b40      	ldr	r3, [pc, #256]	; (800123c <HAL_TIM_MspPostInit+0x180>)
 800113a:	695a      	ldr	r2, [r3, #20]
 800113c:	4b3f      	ldr	r3, [pc, #252]	; (800123c <HAL_TIM_MspPostInit+0x180>)
 800113e:	2180      	movs	r1, #128	; 0x80
 8001140:	0289      	lsls	r1, r1, #10
 8001142:	430a      	orrs	r2, r1
 8001144:	615a      	str	r2, [r3, #20]
 8001146:	4b3d      	ldr	r3, [pc, #244]	; (800123c <HAL_TIM_MspPostInit+0x180>)
 8001148:	695a      	ldr	r2, [r3, #20]
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	029b      	lsls	r3, r3, #10
 800114e:	4013      	ands	r3, r2
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SERVO2_Pin;
 8001154:	211c      	movs	r1, #28
 8001156:	187b      	adds	r3, r7, r1
 8001158:	2220      	movs	r2, #32
 800115a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	187b      	adds	r3, r7, r1
 800115e:	2202      	movs	r2, #2
 8001160:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	187b      	adds	r3, r7, r1
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	187b      	adds	r3, r7, r1
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800116e:	187b      	adds	r3, r7, r1
 8001170:	2202      	movs	r2, #2
 8001172:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO2_GPIO_Port, &GPIO_InitStruct);
 8001174:	187a      	adds	r2, r7, r1
 8001176:	2390      	movs	r3, #144	; 0x90
 8001178:	05db      	lsls	r3, r3, #23
 800117a:	0011      	movs	r1, r2
 800117c:	0018      	movs	r0, r3
 800117e:	f001 f8bf 	bl	8002300 <HAL_GPIO_Init>
}
 8001182:	e054      	b.n	800122e <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM3)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a2d      	ldr	r2, [pc, #180]	; (8001240 <HAL_TIM_MspPostInit+0x184>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d125      	bne.n	80011da <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b2b      	ldr	r3, [pc, #172]	; (800123c <HAL_TIM_MspPostInit+0x180>)
 8001190:	695a      	ldr	r2, [r3, #20]
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <HAL_TIM_MspPostInit+0x180>)
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	0289      	lsls	r1, r1, #10
 8001198:	430a      	orrs	r2, r1
 800119a:	615a      	str	r2, [r3, #20]
 800119c:	4b27      	ldr	r3, [pc, #156]	; (800123c <HAL_TIM_MspPostInit+0x180>)
 800119e:	695a      	ldr	r2, [r3, #20]
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	029b      	lsls	r3, r3, #10
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO3_Pin|SERVO4_Pin;
 80011aa:	211c      	movs	r1, #28
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	22c0      	movs	r2, #192	; 0xc0
 80011b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	187b      	adds	r3, r7, r1
 80011b4:	2202      	movs	r2, #2
 80011b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	187b      	adds	r3, r7, r1
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	2201      	movs	r2, #1
 80011c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	187a      	adds	r2, r7, r1
 80011cc:	2390      	movs	r3, #144	; 0x90
 80011ce:	05db      	lsls	r3, r3, #23
 80011d0:	0011      	movs	r1, r2
 80011d2:	0018      	movs	r0, r3
 80011d4:	f001 f894 	bl	8002300 <HAL_GPIO_Init>
}
 80011d8:	e029      	b.n	800122e <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM14)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a19      	ldr	r2, [pc, #100]	; (8001244 <HAL_TIM_MspPostInit+0x188>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d124      	bne.n	800122e <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_TIM_MspPostInit+0x180>)
 80011e6:	695a      	ldr	r2, [r3, #20]
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_TIM_MspPostInit+0x180>)
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	0289      	lsls	r1, r1, #10
 80011ee:	430a      	orrs	r2, r1
 80011f0:	615a      	str	r2, [r3, #20]
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_TIM_MspPostInit+0x180>)
 80011f4:	695a      	ldr	r2, [r3, #20]
 80011f6:	2380      	movs	r3, #128	; 0x80
 80011f8:	029b      	lsls	r3, r3, #10
 80011fa:	4013      	ands	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO1_Pin;
 8001200:	211c      	movs	r1, #28
 8001202:	187b      	adds	r3, r7, r1
 8001204:	2210      	movs	r2, #16
 8001206:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	187b      	adds	r3, r7, r1
 800120a:	2202      	movs	r2, #2
 800120c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	187b      	adds	r3, r7, r1
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	187b      	adds	r3, r7, r1
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 800121a:	187b      	adds	r3, r7, r1
 800121c:	2204      	movs	r2, #4
 800121e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SERVO1_GPIO_Port, &GPIO_InitStruct);
 8001220:	187a      	adds	r2, r7, r1
 8001222:	2390      	movs	r3, #144	; 0x90
 8001224:	05db      	lsls	r3, r3, #23
 8001226:	0011      	movs	r1, r2
 8001228:	0018      	movs	r0, r3
 800122a:	f001 f869 	bl	8002300 <HAL_GPIO_Init>
}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b00c      	add	sp, #48	; 0x30
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	40012c00 	.word	0x40012c00
 800123c:	40021000 	.word	0x40021000
 8001240:	40000400 	.word	0x40000400
 8001244:	40002000 	.word	0x40002000

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <HardFault_Handler+0x4>

08001258 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001270:	f000 f8c6 	bl	8001400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800127e:	2001      	movs	r0, #1
 8001280:	f001 f9c4 	bl	800260c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001284:	2002      	movs	r0, #2
 8001286:	f001 f9c1 	bl	800260c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001294:	2004      	movs	r0, #4
 8001296:	f001 f9b9 	bl	800260c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800129a:	2008      	movs	r0, #8
 800129c:	f001 f9b6 	bl	800260c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80012a0:	46c0      	nop			; (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80012aa:	2010      	movs	r0, #16
 80012ac:	f001 f9ae 	bl	800260c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80012b0:	2020      	movs	r0, #32
 80012b2:	f001 f9ab 	bl	800260c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80012b6:	2040      	movs	r0, #64	; 0x40
 80012b8:	f001 f9a8 	bl	800260c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80012bc:	2080      	movs	r0, #128	; 0x80
 80012be:	f001 f9a5 	bl	800260c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <CEC_CAN_IRQHandler+0x14>)
 80012ce:	0018      	movs	r0, r3
 80012d0:	f000 fd2f 	bl	8001d32 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	20000030 	.word	0x20000030

080012e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012ec:	4813      	ldr	r0, [pc, #76]	; (800133c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012ee:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80012f0:	4813      	ldr	r0, [pc, #76]	; (8001340 <LoopForever+0x6>)
    LDR R1, [R0]
 80012f2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80012f4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <LoopForever+0xa>)
    CMP R1, R2
 80012f8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80012fa:	d105      	bne.n	8001308 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80012fc:	4812      	ldr	r0, [pc, #72]	; (8001348 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80012fe:	4913      	ldr	r1, [pc, #76]	; (800134c <LoopForever+0x12>)
    STR R1, [R0]
 8001300:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001302:	4813      	ldr	r0, [pc, #76]	; (8001350 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001304:	4913      	ldr	r1, [pc, #76]	; (8001354 <LoopForever+0x1a>)
    STR R1, [R0]
 8001306:	6001      	str	r1, [r0, #0]

08001308 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001308:	4813      	ldr	r0, [pc, #76]	; (8001358 <LoopForever+0x1e>)
  ldr r1, =_edata
 800130a:	4914      	ldr	r1, [pc, #80]	; (800135c <LoopForever+0x22>)
  ldr r2, =_sidata
 800130c:	4a14      	ldr	r2, [pc, #80]	; (8001360 <LoopForever+0x26>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a11      	ldr	r2, [pc, #68]	; (8001364 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001320:	4c11      	ldr	r4, [pc, #68]	; (8001368 <LoopForever+0x2e>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800132e:	f7ff ffd7 	bl	80012e0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001332:	f002 fcc3 	bl	8003cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001336:	f7fe fff9 	bl	800032c <main>

0800133a <LoopForever>:

LoopForever:
    b LoopForever
 800133a:	e7fe      	b.n	800133a <LoopForever>
  ldr   r0, =_estack
 800133c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001340:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001344:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001348:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800134c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001350:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001354:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800135c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001360:	08003de8 	.word	0x08003de8
  ldr r2, =_sbss
 8001364:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001368:	200001cc 	.word	0x200001cc

0800136c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800136c:	e7fe      	b.n	800136c <ADC1_IRQHandler>
	...

08001370 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <HAL_Init+0x24>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_Init+0x24>)
 800137a:	2110      	movs	r1, #16
 800137c:	430a      	orrs	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001380:	2000      	movs	r0, #0
 8001382:	f000 f809 	bl	8001398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001386:	f7ff fdb9 	bl	8000efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	40022000 	.word	0x40022000

08001398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_InitTick+0x5c>)
 80013a2:	681c      	ldr	r4, [r3, #0]
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_InitTick+0x60>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	0019      	movs	r1, r3
 80013aa:	23fa      	movs	r3, #250	; 0xfa
 80013ac:	0098      	lsls	r0, r3, #2
 80013ae:	f7fe feab 	bl	8000108 <__udivsi3>
 80013b2:	0003      	movs	r3, r0
 80013b4:	0019      	movs	r1, r3
 80013b6:	0020      	movs	r0, r4
 80013b8:	f7fe fea6 	bl	8000108 <__udivsi3>
 80013bc:	0003      	movs	r3, r0
 80013be:	0018      	movs	r0, r3
 80013c0:	f000 ff91 	bl	80022e6 <HAL_SYSTICK_Config>
 80013c4:	1e03      	subs	r3, r0, #0
 80013c6:	d001      	beq.n	80013cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e00f      	b.n	80013ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d80b      	bhi.n	80013ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	2301      	movs	r3, #1
 80013d6:	425b      	negs	r3, r3
 80013d8:	2200      	movs	r2, #0
 80013da:	0018      	movs	r0, r3
 80013dc:	f000 ff5e 	bl	800229c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_InitTick+0x64>)
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e000      	b.n	80013ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
}
 80013ec:	0018      	movs	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b003      	add	sp, #12
 80013f2:	bd90      	pop	{r4, r7, pc}
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000008 	.word	0x20000008
 80013fc:	20000004 	.word	0x20000004

08001400 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <HAL_IncTick+0x1c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	001a      	movs	r2, r3
 800140a:	4b05      	ldr	r3, [pc, #20]	; (8001420 <HAL_IncTick+0x20>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	18d2      	adds	r2, r2, r3
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <HAL_IncTick+0x20>)
 8001412:	601a      	str	r2, [r3, #0]
}
 8001414:	46c0      	nop			; (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	20000008 	.word	0x20000008
 8001420:	200001c8 	.word	0x200001c8

08001424 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  return uwTick;
 8001428:	4b02      	ldr	r3, [pc, #8]	; (8001434 <HAL_GetTick+0x10>)
 800142a:	681b      	ldr	r3, [r3, #0]
}
 800142c:	0018      	movs	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	200001c8 	.word	0x200001c8

08001438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001440:	f7ff fff0 	bl	8001424 <HAL_GetTick>
 8001444:	0003      	movs	r3, r0
 8001446:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	3301      	adds	r3, #1
 8001450:	d005      	beq.n	800145e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_Delay+0x40>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	001a      	movs	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	189b      	adds	r3, r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	f7ff ffe0 	bl	8001424 <HAL_GetTick>
 8001464:	0002      	movs	r2, r0
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	429a      	cmp	r2, r3
 800146e:	d8f7      	bhi.n	8001460 <HAL_Delay+0x28>
  {
  }
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b004      	add	sp, #16
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000008 	.word	0x20000008

0800147c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e0f0      	b.n	8001670 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2220      	movs	r2, #32
 8001492:	5c9b      	ldrb	r3, [r3, r2]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d103      	bne.n	80014a2 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff fd51 	bl	8000f44 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2102      	movs	r1, #2
 80014ae:	438a      	bics	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b2:	f7ff ffb7 	bl	8001424 <HAL_GetTick>
 80014b6:	0003      	movs	r3, r0
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014ba:	e013      	b.n	80014e4 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014bc:	f7ff ffb2 	bl	8001424 <HAL_GetTick>
 80014c0:	0002      	movs	r2, r0
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b0a      	cmp	r3, #10
 80014c8:	d90c      	bls.n	80014e4 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	2280      	movs	r2, #128	; 0x80
 80014d0:	0292      	lsls	r2, r2, #10
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2220      	movs	r2, #32
 80014dc:	2105      	movs	r1, #5
 80014de:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e0c5      	b.n	8001670 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2202      	movs	r2, #2
 80014ec:	4013      	ands	r3, r2
 80014ee:	d1e5      	bne.n	80014bc <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2101      	movs	r1, #1
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001500:	f7ff ff90 	bl	8001424 <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001508:	e013      	b.n	8001532 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800150a:	f7ff ff8b 	bl	8001424 <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b0a      	cmp	r3, #10
 8001516:	d90c      	bls.n	8001532 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	2280      	movs	r2, #128	; 0x80
 800151e:	0292      	lsls	r2, r2, #10
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2220      	movs	r2, #32
 800152a:	2105      	movs	r1, #5
 800152c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e09e      	b.n	8001670 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	4013      	ands	r3, r2
 800153c:	d0e5      	beq.n	800150a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7e1b      	ldrb	r3, [r3, #24]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d108      	bne.n	8001558 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2180      	movs	r1, #128	; 0x80
 8001552:	430a      	orrs	r2, r1
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	e007      	b.n	8001568 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	438a      	bics	r2, r1
 8001566:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7e5b      	ldrb	r3, [r3, #25]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d108      	bne.n	8001582 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2140      	movs	r1, #64	; 0x40
 800157c:	430a      	orrs	r2, r1
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	e007      	b.n	8001592 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2140      	movs	r1, #64	; 0x40
 800158e:	438a      	bics	r2, r1
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	7e9b      	ldrb	r3, [r3, #26]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d108      	bne.n	80015ac <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2120      	movs	r1, #32
 80015a6:	430a      	orrs	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	e007      	b.n	80015bc <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2120      	movs	r1, #32
 80015b8:	438a      	bics	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7edb      	ldrb	r3, [r3, #27]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d108      	bne.n	80015d6 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2110      	movs	r1, #16
 80015d0:	438a      	bics	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e007      	b.n	80015e6 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2110      	movs	r1, #16
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7f1b      	ldrb	r3, [r3, #28]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d108      	bne.n	8001600 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2108      	movs	r1, #8
 80015fa:	430a      	orrs	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	e007      	b.n	8001610 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2108      	movs	r1, #8
 800160c:	438a      	bics	r2, r1
 800160e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7f5b      	ldrb	r3, [r3, #29]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d108      	bne.n	800162a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2104      	movs	r1, #4
 8001624:	430a      	orrs	r2, r1
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	e007      	b.n	800163a <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2104      	movs	r1, #4
 8001636:	438a      	bics	r2, r1
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	431a      	orrs	r2, r3
 8001650:	0011      	movs	r1, r2
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	1e5a      	subs	r2, r3, #1
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2220      	movs	r2, #32
 800166a:	2101      	movs	r1, #1
 800166c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	0018      	movs	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	b004      	add	sp, #16
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001688:	2013      	movs	r0, #19
 800168a:	183b      	adds	r3, r7, r0
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	2120      	movs	r1, #32
 8001690:	5c52      	ldrb	r2, [r2, r1]
 8001692:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001694:	183b      	adds	r3, r7, r0
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d005      	beq.n	80016a8 <HAL_CAN_ConfigFilter+0x30>
 800169c:	2313      	movs	r3, #19
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d000      	beq.n	80016a8 <HAL_CAN_ConfigFilter+0x30>
 80016a6:	e0cd      	b.n	8001844 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	58d3      	ldr	r3, [r2, r3]
 80016b0:	2201      	movs	r2, #1
 80016b2:	431a      	orrs	r2, r3
 80016b4:	0011      	movs	r1, r2
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	221f      	movs	r2, #31
 80016c4:	4013      	ands	r3, r2
 80016c6:	2201      	movs	r2, #1
 80016c8:	409a      	lsls	r2, r3
 80016ca:	0013      	movs	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	2387      	movs	r3, #135	; 0x87
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	58d3      	ldr	r3, [r2, r3]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	43d2      	mvns	r2, r2
 80016da:	401a      	ands	r2, r3
 80016dc:	0011      	movs	r1, r2
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	2387      	movs	r3, #135	; 0x87
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d129      	bne.n	8001742 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	2383      	movs	r3, #131	; 0x83
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	58d3      	ldr	r3, [r2, r3]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	43d2      	mvns	r2, r2
 80016fa:	401a      	ands	r2, r3
 80016fc:	0011      	movs	r1, r2
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	2383      	movs	r3, #131	; 0x83
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	041b      	lsls	r3, r3, #16
 8001712:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001718:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3248      	adds	r2, #72	; 0x48
 800171e:	00d2      	lsls	r2, r2, #3
 8001720:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	041b      	lsls	r3, r3, #16
 800172e:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001734:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001736:	6979      	ldr	r1, [r7, #20]
 8001738:	3348      	adds	r3, #72	; 0x48
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	18cb      	adds	r3, r1, r3
 800173e:	3304      	adds	r3, #4
 8001740:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d128      	bne.n	800179c <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	2383      	movs	r3, #131	; 0x83
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	58d2      	ldr	r2, [r2, r3]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	431a      	orrs	r2, r3
 8001756:	0011      	movs	r1, r2
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	2383      	movs	r3, #131	; 0x83
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	041b      	lsls	r3, r3, #16
 800176c:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001772:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	3248      	adds	r2, #72	; 0x48
 8001778:	00d2      	lsls	r2, r2, #3
 800177a:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	041b      	lsls	r3, r3, #16
 8001788:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800178e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001790:	6979      	ldr	r1, [r7, #20]
 8001792:	3348      	adds	r3, #72	; 0x48
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	18cb      	adds	r3, r1, r3
 8001798:	3304      	adds	r3, #4
 800179a:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10c      	bne.n	80017be <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	2381      	movs	r3, #129	; 0x81
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	58d3      	ldr	r3, [r2, r3]
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	43d2      	mvns	r2, r2
 80017b0:	401a      	ands	r2, r3
 80017b2:	0011      	movs	r1, r2
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	2381      	movs	r3, #129	; 0x81
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	50d1      	str	r1, [r2, r3]
 80017bc:	e00a      	b.n	80017d4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	2381      	movs	r3, #129	; 0x81
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	58d2      	ldr	r2, [r2, r3]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	431a      	orrs	r2, r3
 80017ca:	0011      	movs	r1, r2
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	2381      	movs	r3, #129	; 0x81
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10c      	bne.n	80017f6 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	2385      	movs	r3, #133	; 0x85
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	58d3      	ldr	r3, [r2, r3]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	43d2      	mvns	r2, r2
 80017e8:	401a      	ands	r2, r3
 80017ea:	0011      	movs	r1, r2
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	2385      	movs	r3, #133	; 0x85
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	50d1      	str	r1, [r2, r3]
 80017f4:	e00a      	b.n	800180c <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	2385      	movs	r3, #133	; 0x85
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	58d2      	ldr	r2, [r2, r3]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	431a      	orrs	r2, r3
 8001802:	0011      	movs	r1, r2
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	2385      	movs	r3, #133	; 0x85
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d10a      	bne.n	800182a <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	2387      	movs	r3, #135	; 0x87
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	58d2      	ldr	r2, [r2, r3]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	431a      	orrs	r2, r3
 8001820:	0011      	movs	r1, r2
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	2387      	movs	r3, #135	; 0x87
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	58d3      	ldr	r3, [r2, r3]
 8001832:	2201      	movs	r2, #1
 8001834:	4393      	bics	r3, r2
 8001836:	0019      	movs	r1, r3
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	e007      	b.n	8001854 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	02d2      	lsls	r2, r2, #11
 800184c:	431a      	orrs	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
  }
}
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	b006      	add	sp, #24
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2220      	movs	r2, #32
 8001868:	5c9b      	ldrb	r3, [r3, r2]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b01      	cmp	r3, #1
 800186e:	d12f      	bne.n	80018d0 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2220      	movs	r2, #32
 8001874:	2102      	movs	r1, #2
 8001876:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2101      	movs	r1, #1
 8001884:	438a      	bics	r2, r1
 8001886:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001888:	f7ff fdcc 	bl	8001424 <HAL_GetTick>
 800188c:	0003      	movs	r3, r0
 800188e:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001890:	e013      	b.n	80018ba <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001892:	f7ff fdc7 	bl	8001424 <HAL_GetTick>
 8001896:	0002      	movs	r2, r0
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b0a      	cmp	r3, #10
 800189e:	d90c      	bls.n	80018ba <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	2280      	movs	r2, #128	; 0x80
 80018a6:	0292      	lsls	r2, r2, #10
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2220      	movs	r2, #32
 80018b2:	2105      	movs	r1, #5
 80018b4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e012      	b.n	80018e0 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	4013      	ands	r3, r2
 80018c4:	d1e5      	bne.n	8001892 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e007      	b.n	80018e0 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	2280      	movs	r2, #128	; 0x80
 80018d6:	0312      	lsls	r2, r2, #12
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
  }
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b004      	add	sp, #16
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80018f6:	201f      	movs	r0, #31
 80018f8:	183b      	adds	r3, r7, r0
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	2120      	movs	r1, #32
 80018fe:	5c52      	ldrb	r2, [r2, r1]
 8001900:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800190a:	183b      	adds	r3, r7, r0
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d005      	beq.n	800191e <HAL_CAN_AddTxMessage+0x36>
 8001912:	231f      	movs	r3, #31
 8001914:	18fb      	adds	r3, r7, r3
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d000      	beq.n	800191e <HAL_CAN_AddTxMessage+0x36>
 800191c:	e0b7      	b.n	8001a8e <HAL_CAN_AddTxMessage+0x1a6>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	04db      	lsls	r3, r3, #19
 8001924:	4013      	ands	r3, r2
 8001926:	d10a      	bne.n	800193e <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	2380      	movs	r3, #128	; 0x80
 800192c:	051b      	lsls	r3, r3, #20
 800192e:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001930:	d105      	bne.n	800193e <HAL_CAN_AddTxMessage+0x56>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	055b      	lsls	r3, r3, #21
 8001938:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800193a:	d100      	bne.n	800193e <HAL_CAN_AddTxMessage+0x56>
 800193c:	e09e      	b.n	8001a7c <HAL_CAN_AddTxMessage+0x194>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	0e1b      	lsrs	r3, r3, #24
 8001942:	2203      	movs	r2, #3
 8001944:	4013      	ands	r3, r2
 8001946:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d908      	bls.n	8001960 <HAL_CAN_AddTxMessage+0x78>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	2280      	movs	r2, #128	; 0x80
 8001954:	0412      	lsls	r2, r2, #16
 8001956:	431a      	orrs	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e09e      	b.n	8001a9e <HAL_CAN_AddTxMessage+0x1b6>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001960:	2201      	movs	r2, #1
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	409a      	lsls	r2, r3
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10c      	bne.n	800198c <HAL_CAN_AddTxMessage+0xa4>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4311      	orrs	r1, r2
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	3218      	adds	r2, #24
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	50d1      	str	r1, [r2, r3]
 800198a:	e00f      	b.n	80019ac <HAL_CAN_AddTxMessage+0xc4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001996:	431a      	orrs	r2, r3
 8001998:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80019a2:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	3218      	adds	r2, #24
 80019a8:	0112      	lsls	r2, r2, #4
 80019aa:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6819      	ldr	r1, [r3, #0]
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	691a      	ldr	r2, [r3, #16]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	3318      	adds	r3, #24
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	18cb      	adds	r3, r1, r3
 80019bc:	3304      	adds	r3, #4
 80019be:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	7d1b      	ldrb	r3, [r3, #20]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d112      	bne.n	80019ee <HAL_CAN_AddTxMessage+0x106>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3318      	adds	r3, #24
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	18d3      	adds	r3, r2, r3
 80019d4:	3304      	adds	r3, #4
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6819      	ldr	r1, [r3, #0]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	431a      	orrs	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	3318      	adds	r3, #24
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	18cb      	adds	r3, r1, r3
 80019ea:	3304      	adds	r3, #4
 80019ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3307      	adds	r3, #7
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	061a      	lsls	r2, r3, #24
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3306      	adds	r3, #6
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	041b      	lsls	r3, r3, #16
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3305      	adds	r3, #5
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	0019      	movs	r1, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6818      	ldr	r0, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	6979      	ldr	r1, [r7, #20]
 8001a1a:	23c6      	movs	r3, #198	; 0xc6
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	0109      	lsls	r1, r1, #4
 8001a20:	1841      	adds	r1, r0, r1
 8001a22:	18cb      	adds	r3, r1, r3
 8001a24:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3303      	adds	r3, #3
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	061a      	lsls	r2, r3, #24
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3302      	adds	r3, #2
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	041b      	lsls	r3, r3, #16
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	0019      	movs	r1, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	6979      	ldr	r1, [r7, #20]
 8001a50:	23c4      	movs	r3, #196	; 0xc4
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	0109      	lsls	r1, r1, #4
 8001a56:	1841      	adds	r1, r0, r1
 8001a58:	18cb      	adds	r3, r1, r3
 8001a5a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	3218      	adds	r2, #24
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	58d2      	ldr	r2, [r2, r3]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	4311      	orrs	r1, r2
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	3218      	adds	r2, #24
 8001a74:	0112      	lsls	r2, r2, #4
 8001a76:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e010      	b.n	8001a9e <HAL_CAN_AddTxMessage+0x1b6>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	2280      	movs	r2, #128	; 0x80
 8001a82:	0392      	lsls	r2, r2, #14
 8001a84:	431a      	orrs	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e007      	b.n	8001a9e <HAL_CAN_AddTxMessage+0x1b6>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	2280      	movs	r2, #128	; 0x80
 8001a94:	02d2      	lsls	r2, r2, #11
 8001a96:	431a      	orrs	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
  }
}
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b008      	add	sp, #32
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ab4:	2017      	movs	r0, #23
 8001ab6:	183b      	adds	r3, r7, r0
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	2120      	movs	r1, #32
 8001abc:	5c52      	ldrb	r2, [r2, r1]
 8001abe:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ac0:	183b      	adds	r3, r7, r0
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d005      	beq.n	8001ad4 <HAL_CAN_GetRxMessage+0x2e>
 8001ac8:	2317      	movs	r3, #23
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d000      	beq.n	8001ad4 <HAL_CAN_GetRxMessage+0x2e>
 8001ad2:	e0f8      	b.n	8001cc6 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10e      	bne.n	8001af8 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d117      	bne.n	8001b16 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	0392      	lsls	r2, r2, #14
 8001aee:	431a      	orrs	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0ee      	b.n	8001cd6 <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	2203      	movs	r2, #3
 8001b00:	4013      	ands	r3, r2
 8001b02:	d108      	bne.n	8001b16 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	2280      	movs	r2, #128	; 0x80
 8001b0a:	0392      	lsls	r2, r2, #14
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e0df      	b.n	8001cd6 <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	321b      	adds	r2, #27
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	58d3      	ldr	r3, [r2, r3]
 8001b22:	2204      	movs	r2, #4
 8001b24:	401a      	ands	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10b      	bne.n	8001b4a <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	321b      	adds	r2, #27
 8001b3a:	0112      	lsls	r2, r2, #4
 8001b3c:	58d3      	ldr	r3, [r2, r3]
 8001b3e:	0d5b      	lsrs	r3, r3, #21
 8001b40:	055b      	lsls	r3, r3, #21
 8001b42:	0d5a      	lsrs	r2, r3, #21
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	e00a      	b.n	8001b60 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	321b      	adds	r2, #27
 8001b52:	0112      	lsls	r2, r2, #4
 8001b54:	58d3      	ldr	r3, [r2, r3]
 8001b56:	08db      	lsrs	r3, r3, #3
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	321b      	adds	r2, #27
 8001b68:	0112      	lsls	r2, r2, #4
 8001b6a:	58d3      	ldr	r3, [r2, r3]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	401a      	ands	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	331b      	adds	r3, #27
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	18d3      	adds	r3, r2, r3
 8001b80:	3304      	adds	r3, #4
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	220f      	movs	r2, #15
 8001b86:	401a      	ands	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	331b      	adds	r3, #27
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	18d3      	adds	r3, r2, r3
 8001b98:	3304      	adds	r3, #4
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	22ff      	movs	r2, #255	; 0xff
 8001ba0:	401a      	ands	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	331b      	adds	r3, #27
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	18d3      	adds	r3, r2, r3
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0c1b      	lsrs	r3, r3, #16
 8001bb8:	041b      	lsls	r3, r3, #16
 8001bba:	0c1a      	lsrs	r2, r3, #16
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6819      	ldr	r1, [r3, #0]
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	23dc      	movs	r3, #220	; 0xdc
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	188a      	adds	r2, r1, r2
 8001bce:	18d3      	adds	r3, r2, r3
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6819      	ldr	r1, [r3, #0]
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	23dc      	movs	r3, #220	; 0xdc
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	188a      	adds	r2, r1, r2
 8001be6:	18d3      	adds	r3, r2, r3
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	0a1a      	lsrs	r2, r3, #8
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6819      	ldr	r1, [r3, #0]
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	23dc      	movs	r3, #220	; 0xdc
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	0112      	lsls	r2, r2, #4
 8001c00:	188a      	adds	r2, r1, r2
 8001c02:	18d3      	adds	r3, r2, r3
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0c1a      	lsrs	r2, r3, #16
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6819      	ldr	r1, [r3, #0]
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	23dc      	movs	r3, #220	; 0xdc
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	0112      	lsls	r2, r2, #4
 8001c1c:	188a      	adds	r2, r1, r2
 8001c1e:	18d3      	adds	r3, r2, r3
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	0e1a      	lsrs	r2, r3, #24
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	3303      	adds	r3, #3
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6819      	ldr	r1, [r3, #0]
 8001c30:	68ba      	ldr	r2, [r7, #8]
 8001c32:	23de      	movs	r3, #222	; 0xde
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	0112      	lsls	r2, r2, #4
 8001c38:	188a      	adds	r2, r1, r2
 8001c3a:	18d3      	adds	r3, r2, r3
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	3304      	adds	r3, #4
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	6819      	ldr	r1, [r3, #0]
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	23de      	movs	r3, #222	; 0xde
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	188a      	adds	r2, r1, r2
 8001c54:	18d3      	adds	r3, r2, r3
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	0a1a      	lsrs	r2, r3, #8
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	3305      	adds	r3, #5
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	23de      	movs	r3, #222	; 0xde
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	188a      	adds	r2, r1, r2
 8001c70:	18d3      	adds	r3, r2, r3
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	0c1a      	lsrs	r2, r3, #16
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	3306      	adds	r3, #6
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6819      	ldr	r1, [r3, #0]
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	23de      	movs	r3, #222	; 0xde
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	188a      	adds	r2, r1, r2
 8001c8c:	18d3      	adds	r3, r2, r3
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	0e1a      	lsrs	r2, r3, #24
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	3307      	adds	r3, #7
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d108      	bne.n	8001cb2 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2120      	movs	r1, #32
 8001cac:	430a      	orrs	r2, r1
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	e007      	b.n	8001cc2 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2120      	movs	r1, #32
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e007      	b.n	8001cd6 <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cca:	2280      	movs	r2, #128	; 0x80
 8001ccc:	02d2      	lsls	r2, r2, #11
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
  }
}
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b006      	add	sp, #24
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ce8:	200f      	movs	r0, #15
 8001cea:	183b      	adds	r3, r7, r0
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	2120      	movs	r1, #32
 8001cf0:	5c52      	ldrb	r2, [r2, r1]
 8001cf2:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cf4:	183b      	adds	r3, r7, r0
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d004      	beq.n	8001d06 <HAL_CAN_ActivateNotification+0x28>
 8001cfc:	230f      	movs	r3, #15
 8001cfe:	18fb      	adds	r3, r7, r3
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d109      	bne.n	8001d1a <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6959      	ldr	r1, [r3, #20]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e007      	b.n	8001d2a <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	2280      	movs	r2, #128	; 0x80
 8001d20:	02d2      	lsls	r2, r2, #11
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
  }
}
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b004      	add	sp, #16
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b08a      	sub	sp, #40	; 0x28
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	2201      	movs	r2, #1
 8001d72:	4013      	ands	r3, r2
 8001d74:	d100      	bne.n	8001d78 <HAL_CAN_IRQHandler+0x46>
 8001d76:	e084      	b.n	8001e82 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d024      	beq.n	8001dca <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2201      	movs	r2, #1
 8001d86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d004      	beq.n	8001d9a <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	0018      	movs	r0, r3
 8001d94:	f000 f97e 	bl	8002094 <HAL_CAN_TxMailbox0CompleteCallback>
 8001d98:	e017      	b.n	8001dca <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d005      	beq.n	8001dae <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	2280      	movs	r2, #128	; 0x80
 8001da6:	0112      	lsls	r2, r2, #4
 8001da8:	4313      	orrs	r3, r2
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
 8001dac:	e00d      	b.n	8001dca <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	2208      	movs	r2, #8
 8001db2:	4013      	ands	r3, r2
 8001db4:	d005      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	2280      	movs	r2, #128	; 0x80
 8001dba:	0152      	lsls	r2, r2, #5
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc0:	e003      	b.n	8001dca <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f000 f97d 	bl	80020c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d028      	beq.n	8001e26 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2280      	movs	r2, #128	; 0x80
 8001dda:	0052      	lsls	r2, r2, #1
 8001ddc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4013      	ands	r3, r2
 8001de6:	d004      	beq.n	8001df2 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	0018      	movs	r0, r3
 8001dec:	f000 f95a 	bl	80020a4 <HAL_CAN_TxMailbox1CompleteCallback>
 8001df0:	e019      	b.n	8001e26 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d005      	beq.n	8001e08 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	2280      	movs	r2, #128	; 0x80
 8001e00:	0192      	lsls	r2, r2, #6
 8001e02:	4313      	orrs	r3, r2
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
 8001e06:	e00e      	b.n	8001e26 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d005      	beq.n	8001e1e <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	2280      	movs	r2, #128	; 0x80
 8001e16:	01d2      	lsls	r2, r2, #7
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1c:	e003      	b.n	8001e26 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f000 f957 	bl	80020d4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	025b      	lsls	r3, r3, #9
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d028      	beq.n	8001e82 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2280      	movs	r2, #128	; 0x80
 8001e36:	0252      	lsls	r2, r2, #9
 8001e38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	029b      	lsls	r3, r3, #10
 8001e40:	4013      	ands	r3, r2
 8001e42:	d004      	beq.n	8001e4e <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	0018      	movs	r0, r3
 8001e48:	f000 f934 	bl	80020b4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e4c:	e019      	b.n	8001e82 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	02db      	lsls	r3, r3, #11
 8001e54:	4013      	ands	r3, r2
 8001e56:	d005      	beq.n	8001e64 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	2280      	movs	r2, #128	; 0x80
 8001e5c:	0212      	lsls	r2, r2, #8
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
 8001e62:	e00e      	b.n	8001e82 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	031b      	lsls	r3, r3, #12
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d005      	beq.n	8001e7a <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	2280      	movs	r2, #128	; 0x80
 8001e72:	0252      	lsls	r2, r2, #9
 8001e74:	4313      	orrs	r3, r2
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
 8001e78:	e003      	b.n	8001e82 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f000 f931 	bl	80020e4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	2208      	movs	r2, #8
 8001e86:	4013      	ands	r3, r2
 8001e88:	d00c      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2210      	movs	r2, #16
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d008      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	2280      	movs	r2, #128	; 0x80
 8001e96:	0092      	lsls	r2, r2, #2
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ea4:	6a3b      	ldr	r3, [r7, #32]
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d00b      	beq.n	8001ec4 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2208      	movs	r2, #8
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d007      	beq.n	8001ec4 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2208      	movs	r2, #8
 8001eba:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f000 f918 	bl	80020f4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d009      	beq.n	8001ee0 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d003      	beq.n	8001ee0 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	0018      	movs	r0, r3
 8001edc:	f7fe fe82 	bl	8000be4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	2240      	movs	r2, #64	; 0x40
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d00c      	beq.n	8001f02 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	2210      	movs	r2, #16
 8001eec:	4013      	ands	r3, r2
 8001eee:	d008      	beq.n	8001f02 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	2280      	movs	r2, #128	; 0x80
 8001ef4:	00d2      	lsls	r2, r2, #3
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2210      	movs	r2, #16
 8001f00:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	2220      	movs	r2, #32
 8001f06:	4013      	ands	r3, r2
 8001f08:	d00b      	beq.n	8001f22 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d007      	beq.n	8001f22 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2208      	movs	r2, #8
 8001f18:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f000 f8f1 	bl	8002104 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	2210      	movs	r2, #16
 8001f26:	4013      	ands	r3, r2
 8001f28:	d009      	beq.n	8001f3e <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	2203      	movs	r2, #3
 8001f32:	4013      	ands	r3, r2
 8001f34:	d003      	beq.n	8001f3e <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7fe feb7 	bl	8000cac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f3e:	6a3a      	ldr	r2, [r7, #32]
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	029b      	lsls	r3, r3, #10
 8001f44:	4013      	ands	r3, r2
 8001f46:	d00b      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	2210      	movs	r2, #16
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d007      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2210      	movs	r2, #16
 8001f56:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f000 f8da 	bl	8002114 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f60:	6a3a      	ldr	r2, [r7, #32]
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	025b      	lsls	r3, r3, #9
 8001f66:	4013      	ands	r3, r2
 8001f68:	d00b      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d007      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2208      	movs	r2, #8
 8001f78:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f000 f8d1 	bl	8002124 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f82:	6a3a      	ldr	r2, [r7, #32]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	021b      	lsls	r3, r3, #8
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d100      	bne.n	8001f8e <HAL_CAN_IRQHandler+0x25c>
 8001f8c:	e071      	b.n	8002072 <HAL_CAN_IRQHandler+0x340>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	2204      	movs	r2, #4
 8001f92:	4013      	ands	r3, r2
 8001f94:	d100      	bne.n	8001f98 <HAL_CAN_IRQHandler+0x266>
 8001f96:	e068      	b.n	800206a <HAL_CAN_IRQHandler+0x338>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f98:	6a3a      	ldr	r2, [r7, #32]
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d007      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fa8:	d003      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	2201      	movs	r2, #1
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fb2:	6a3a      	ldr	r2, [r7, #32]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d007      	beq.n	8001fcc <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fc2:	d003      	beq.n	8001fcc <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fcc:	6a3a      	ldr	r2, [r7, #32]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d007      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2204      	movs	r2, #4
 8001fda:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fdc:	d003      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fe6:	6a3a      	ldr	r2, [r7, #32]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	4013      	ands	r3, r2
 8001fee:	d03c      	beq.n	800206a <HAL_CAN_IRQHandler+0x338>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2270      	movs	r2, #112	; 0x70
 8001ff4:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ff6:	d038      	beq.n	800206a <HAL_CAN_IRQHandler+0x338>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2270      	movs	r2, #112	; 0x70
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b30      	cmp	r3, #48	; 0x30
 8002000:	d016      	beq.n	8002030 <HAL_CAN_IRQHandler+0x2fe>
 8002002:	d804      	bhi.n	800200e <HAL_CAN_IRQHandler+0x2dc>
 8002004:	2b10      	cmp	r3, #16
 8002006:	d009      	beq.n	800201c <HAL_CAN_IRQHandler+0x2ea>
 8002008:	2b20      	cmp	r3, #32
 800200a:	d00c      	beq.n	8002026 <HAL_CAN_IRQHandler+0x2f4>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800200c:	e025      	b.n	800205a <HAL_CAN_IRQHandler+0x328>
        switch (esrflags & CAN_ESR_LEC)
 800200e:	2b50      	cmp	r3, #80	; 0x50
 8002010:	d018      	beq.n	8002044 <HAL_CAN_IRQHandler+0x312>
 8002012:	2b60      	cmp	r3, #96	; 0x60
 8002014:	d01b      	beq.n	800204e <HAL_CAN_IRQHandler+0x31c>
 8002016:	2b40      	cmp	r3, #64	; 0x40
 8002018:	d00f      	beq.n	800203a <HAL_CAN_IRQHandler+0x308>
            break;
 800201a:	e01e      	b.n	800205a <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_STF;
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	2208      	movs	r2, #8
 8002020:	4313      	orrs	r3, r2
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002024:	e019      	b.n	800205a <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	2210      	movs	r2, #16
 800202a:	4313      	orrs	r3, r2
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800202e:	e014      	b.n	800205a <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	2220      	movs	r2, #32
 8002034:	4313      	orrs	r3, r2
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002038:	e00f      	b.n	800205a <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BR;
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	2240      	movs	r2, #64	; 0x40
 800203e:	4313      	orrs	r3, r2
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002042:	e00a      	b.n	800205a <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_BD;
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	2280      	movs	r2, #128	; 0x80
 8002048:	4313      	orrs	r3, r2
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800204c:	e005      	b.n	800205a <HAL_CAN_IRQHandler+0x328>
            errorcode |= HAL_CAN_ERROR_CRC;
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	2280      	movs	r2, #128	; 0x80
 8002052:	0052      	lsls	r2, r2, #1
 8002054:	4313      	orrs	r3, r2
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002058:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699a      	ldr	r2, [r3, #24]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2170      	movs	r1, #112	; 0x70
 8002066:	438a      	bics	r2, r1
 8002068:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2204      	movs	r2, #4
 8002070:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	2b00      	cmp	r3, #0
 8002076:	d009      	beq.n	800208c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	0018      	movs	r0, r3
 8002088:	f000 f854 	bl	8002134 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800208c:	46c0      	nop			; (mov r8, r8)
 800208e:	46bd      	mov	sp, r7
 8002090:	b00a      	add	sp, #40	; 0x28
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800209c:	46c0      	nop			; (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b002      	add	sp, #8
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b002      	add	sp, #8
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b002      	add	sp, #8
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b002      	add	sp, #8
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80020dc:	46c0      	nop			; (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	b002      	add	sp, #8
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020ec:	46c0      	nop			; (mov r8, r8)
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b002      	add	sp, #8
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80020fc:	46c0      	nop			; (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	b002      	add	sp, #8
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800210c:	46c0      	nop			; (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	b002      	add	sp, #8
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800211c:	46c0      	nop			; (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	b002      	add	sp, #8
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800212c:	46c0      	nop			; (mov r8, r8)
 800212e:	46bd      	mov	sp, r7
 8002130:	b002      	add	sp, #8
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b002      	add	sp, #8
 8002142:	bd80      	pop	{r7, pc}

08002144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	0002      	movs	r2, r0
 800214c:	1dfb      	adds	r3, r7, #7
 800214e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002150:	1dfb      	adds	r3, r7, #7
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b7f      	cmp	r3, #127	; 0x7f
 8002156:	d809      	bhi.n	800216c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002158:	1dfb      	adds	r3, r7, #7
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	001a      	movs	r2, r3
 800215e:	231f      	movs	r3, #31
 8002160:	401a      	ands	r2, r3
 8002162:	4b04      	ldr	r3, [pc, #16]	; (8002174 <__NVIC_EnableIRQ+0x30>)
 8002164:	2101      	movs	r1, #1
 8002166:	4091      	lsls	r1, r2
 8002168:	000a      	movs	r2, r1
 800216a:	601a      	str	r2, [r3, #0]
  }
}
 800216c:	46c0      	nop			; (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	b002      	add	sp, #8
 8002172:	bd80      	pop	{r7, pc}
 8002174:	e000e100 	.word	0xe000e100

08002178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	0002      	movs	r2, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	1dfb      	adds	r3, r7, #7
 8002184:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002186:	1dfb      	adds	r3, r7, #7
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b7f      	cmp	r3, #127	; 0x7f
 800218c:	d828      	bhi.n	80021e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800218e:	4a2f      	ldr	r2, [pc, #188]	; (800224c <__NVIC_SetPriority+0xd4>)
 8002190:	1dfb      	adds	r3, r7, #7
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	b25b      	sxtb	r3, r3
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	33c0      	adds	r3, #192	; 0xc0
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	589b      	ldr	r3, [r3, r2]
 800219e:	1dfa      	adds	r2, r7, #7
 80021a0:	7812      	ldrb	r2, [r2, #0]
 80021a2:	0011      	movs	r1, r2
 80021a4:	2203      	movs	r2, #3
 80021a6:	400a      	ands	r2, r1
 80021a8:	00d2      	lsls	r2, r2, #3
 80021aa:	21ff      	movs	r1, #255	; 0xff
 80021ac:	4091      	lsls	r1, r2
 80021ae:	000a      	movs	r2, r1
 80021b0:	43d2      	mvns	r2, r2
 80021b2:	401a      	ands	r2, r3
 80021b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	019b      	lsls	r3, r3, #6
 80021ba:	22ff      	movs	r2, #255	; 0xff
 80021bc:	401a      	ands	r2, r3
 80021be:	1dfb      	adds	r3, r7, #7
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	0018      	movs	r0, r3
 80021c4:	2303      	movs	r3, #3
 80021c6:	4003      	ands	r3, r0
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021cc:	481f      	ldr	r0, [pc, #124]	; (800224c <__NVIC_SetPriority+0xd4>)
 80021ce:	1dfb      	adds	r3, r7, #7
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	b25b      	sxtb	r3, r3
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	430a      	orrs	r2, r1
 80021d8:	33c0      	adds	r3, #192	; 0xc0
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80021de:	e031      	b.n	8002244 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021e0:	4a1b      	ldr	r2, [pc, #108]	; (8002250 <__NVIC_SetPriority+0xd8>)
 80021e2:	1dfb      	adds	r3, r7, #7
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	0019      	movs	r1, r3
 80021e8:	230f      	movs	r3, #15
 80021ea:	400b      	ands	r3, r1
 80021ec:	3b08      	subs	r3, #8
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	3306      	adds	r3, #6
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	18d3      	adds	r3, r2, r3
 80021f6:	3304      	adds	r3, #4
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	1dfa      	adds	r2, r7, #7
 80021fc:	7812      	ldrb	r2, [r2, #0]
 80021fe:	0011      	movs	r1, r2
 8002200:	2203      	movs	r2, #3
 8002202:	400a      	ands	r2, r1
 8002204:	00d2      	lsls	r2, r2, #3
 8002206:	21ff      	movs	r1, #255	; 0xff
 8002208:	4091      	lsls	r1, r2
 800220a:	000a      	movs	r2, r1
 800220c:	43d2      	mvns	r2, r2
 800220e:	401a      	ands	r2, r3
 8002210:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	019b      	lsls	r3, r3, #6
 8002216:	22ff      	movs	r2, #255	; 0xff
 8002218:	401a      	ands	r2, r3
 800221a:	1dfb      	adds	r3, r7, #7
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	0018      	movs	r0, r3
 8002220:	2303      	movs	r3, #3
 8002222:	4003      	ands	r3, r0
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002228:	4809      	ldr	r0, [pc, #36]	; (8002250 <__NVIC_SetPriority+0xd8>)
 800222a:	1dfb      	adds	r3, r7, #7
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	001c      	movs	r4, r3
 8002230:	230f      	movs	r3, #15
 8002232:	4023      	ands	r3, r4
 8002234:	3b08      	subs	r3, #8
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	430a      	orrs	r2, r1
 800223a:	3306      	adds	r3, #6
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	18c3      	adds	r3, r0, r3
 8002240:	3304      	adds	r3, #4
 8002242:	601a      	str	r2, [r3, #0]
}
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	b003      	add	sp, #12
 800224a:	bd90      	pop	{r4, r7, pc}
 800224c:	e000e100 	.word	0xe000e100
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3b01      	subs	r3, #1
 8002260:	4a0c      	ldr	r2, [pc, #48]	; (8002294 <SysTick_Config+0x40>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002266:	2301      	movs	r3, #1
 8002268:	e010      	b.n	800228c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <SysTick_Config+0x44>)
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	3a01      	subs	r2, #1
 8002270:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002272:	2301      	movs	r3, #1
 8002274:	425b      	negs	r3, r3
 8002276:	2103      	movs	r1, #3
 8002278:	0018      	movs	r0, r3
 800227a:	f7ff ff7d 	bl	8002178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <SysTick_Config+0x44>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <SysTick_Config+0x44>)
 8002286:	2207      	movs	r2, #7
 8002288:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800228a:	2300      	movs	r3, #0
}
 800228c:	0018      	movs	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	b002      	add	sp, #8
 8002292:	bd80      	pop	{r7, pc}
 8002294:	00ffffff 	.word	0x00ffffff
 8002298:	e000e010 	.word	0xe000e010

0800229c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	210f      	movs	r1, #15
 80022a8:	187b      	adds	r3, r7, r1
 80022aa:	1c02      	adds	r2, r0, #0
 80022ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	187b      	adds	r3, r7, r1
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b25b      	sxtb	r3, r3
 80022b6:	0011      	movs	r1, r2
 80022b8:	0018      	movs	r0, r3
 80022ba:	f7ff ff5d 	bl	8002178 <__NVIC_SetPriority>
}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b004      	add	sp, #16
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	0002      	movs	r2, r0
 80022ce:	1dfb      	adds	r3, r7, #7
 80022d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d2:	1dfb      	adds	r3, r7, #7
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	b25b      	sxtb	r3, r3
 80022d8:	0018      	movs	r0, r3
 80022da:	f7ff ff33 	bl	8002144 <__NVIC_EnableIRQ>
}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b002      	add	sp, #8
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	0018      	movs	r0, r3
 80022f2:	f7ff ffaf 	bl	8002254 <SysTick_Config>
 80022f6:	0003      	movs	r3, r0
}
 80022f8:	0018      	movs	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b002      	add	sp, #8
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800230e:	e149      	b.n	80025a4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2101      	movs	r1, #1
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4091      	lsls	r1, r2
 800231a:	000a      	movs	r2, r1
 800231c:	4013      	ands	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d100      	bne.n	8002328 <HAL_GPIO_Init+0x28>
 8002326:	e13a      	b.n	800259e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d00b      	beq.n	8002348 <HAL_GPIO_Init+0x48>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b02      	cmp	r3, #2
 8002336:	d007      	beq.n	8002348 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800233c:	2b11      	cmp	r3, #17
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b12      	cmp	r3, #18
 8002346:	d130      	bne.n	80023aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2203      	movs	r2, #3
 8002354:	409a      	lsls	r2, r3
 8002356:	0013      	movs	r3, r2
 8002358:	43da      	mvns	r2, r3
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	409a      	lsls	r2, r3
 800236a:	0013      	movs	r3, r2
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800237e:	2201      	movs	r2, #1
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	409a      	lsls	r2, r3
 8002384:	0013      	movs	r3, r2
 8002386:	43da      	mvns	r2, r3
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	2201      	movs	r2, #1
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	409a      	lsls	r2, r3
 800239c:	0013      	movs	r3, r2
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	2203      	movs	r2, #3
 80023b6:	409a      	lsls	r2, r3
 80023b8:	0013      	movs	r3, r2
 80023ba:	43da      	mvns	r2, r3
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	409a      	lsls	r2, r3
 80023cc:	0013      	movs	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0xea>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b12      	cmp	r3, #18
 80023e8:	d123      	bne.n	8002432 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	08da      	lsrs	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3208      	adds	r2, #8
 80023f2:	0092      	lsls	r2, r2, #2
 80023f4:	58d3      	ldr	r3, [r2, r3]
 80023f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2207      	movs	r2, #7
 80023fc:	4013      	ands	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	220f      	movs	r2, #15
 8002402:	409a      	lsls	r2, r3
 8002404:	0013      	movs	r3, r2
 8002406:	43da      	mvns	r2, r3
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2107      	movs	r1, #7
 8002416:	400b      	ands	r3, r1
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	409a      	lsls	r2, r3
 800241c:	0013      	movs	r3, r2
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	08da      	lsrs	r2, r3, #3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3208      	adds	r2, #8
 800242c:	0092      	lsls	r2, r2, #2
 800242e:	6939      	ldr	r1, [r7, #16]
 8002430:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	2203      	movs	r2, #3
 800243e:	409a      	lsls	r2, r3
 8002440:	0013      	movs	r3, r2
 8002442:	43da      	mvns	r2, r3
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2203      	movs	r2, #3
 8002450:	401a      	ands	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	409a      	lsls	r2, r3
 8002458:	0013      	movs	r3, r2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	055b      	lsls	r3, r3, #21
 800246e:	4013      	ands	r3, r2
 8002470:	d100      	bne.n	8002474 <HAL_GPIO_Init+0x174>
 8002472:	e094      	b.n	800259e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002474:	4b51      	ldr	r3, [pc, #324]	; (80025bc <HAL_GPIO_Init+0x2bc>)
 8002476:	699a      	ldr	r2, [r3, #24]
 8002478:	4b50      	ldr	r3, [pc, #320]	; (80025bc <HAL_GPIO_Init+0x2bc>)
 800247a:	2101      	movs	r1, #1
 800247c:	430a      	orrs	r2, r1
 800247e:	619a      	str	r2, [r3, #24]
 8002480:	4b4e      	ldr	r3, [pc, #312]	; (80025bc <HAL_GPIO_Init+0x2bc>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	2201      	movs	r2, #1
 8002486:	4013      	ands	r3, r2
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800248c:	4a4c      	ldr	r2, [pc, #304]	; (80025c0 <HAL_GPIO_Init+0x2c0>)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	089b      	lsrs	r3, r3, #2
 8002492:	3302      	adds	r3, #2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	589b      	ldr	r3, [r3, r2]
 8002498:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2203      	movs	r2, #3
 800249e:	4013      	ands	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	220f      	movs	r2, #15
 80024a4:	409a      	lsls	r2, r3
 80024a6:	0013      	movs	r3, r2
 80024a8:	43da      	mvns	r2, r3
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	2390      	movs	r3, #144	; 0x90
 80024b4:	05db      	lsls	r3, r3, #23
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d00d      	beq.n	80024d6 <HAL_GPIO_Init+0x1d6>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a41      	ldr	r2, [pc, #260]	; (80025c4 <HAL_GPIO_Init+0x2c4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d007      	beq.n	80024d2 <HAL_GPIO_Init+0x1d2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a40      	ldr	r2, [pc, #256]	; (80025c8 <HAL_GPIO_Init+0x2c8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d101      	bne.n	80024ce <HAL_GPIO_Init+0x1ce>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e004      	b.n	80024d8 <HAL_GPIO_Init+0x1d8>
 80024ce:	2305      	movs	r3, #5
 80024d0:	e002      	b.n	80024d8 <HAL_GPIO_Init+0x1d8>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <HAL_GPIO_Init+0x1d8>
 80024d6:	2300      	movs	r3, #0
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	2103      	movs	r1, #3
 80024dc:	400a      	ands	r2, r1
 80024de:	0092      	lsls	r2, r2, #2
 80024e0:	4093      	lsls	r3, r2
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024e8:	4935      	ldr	r1, [pc, #212]	; (80025c0 <HAL_GPIO_Init+0x2c0>)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	089b      	lsrs	r3, r3, #2
 80024ee:	3302      	adds	r3, #2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f6:	4b35      	ldr	r3, [pc, #212]	; (80025cc <HAL_GPIO_Init+0x2cc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	43da      	mvns	r2, r3
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	025b      	lsls	r3, r3, #9
 800250e:	4013      	ands	r3, r2
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800251a:	4b2c      	ldr	r3, [pc, #176]	; (80025cc <HAL_GPIO_Init+0x2cc>)
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002520:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <HAL_GPIO_Init+0x2cc>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	43da      	mvns	r2, r3
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	029b      	lsls	r3, r3, #10
 8002538:	4013      	ands	r3, r2
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002544:	4b21      	ldr	r3, [pc, #132]	; (80025cc <HAL_GPIO_Init+0x2cc>)
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <HAL_GPIO_Init+0x2cc>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	43da      	mvns	r2, r3
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	2380      	movs	r3, #128	; 0x80
 8002560:	035b      	lsls	r3, r3, #13
 8002562:	4013      	ands	r3, r2
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <HAL_GPIO_Init+0x2cc>)
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002574:	4b15      	ldr	r3, [pc, #84]	; (80025cc <HAL_GPIO_Init+0x2cc>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	43da      	mvns	r2, r3
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	039b      	lsls	r3, r3, #14
 800258c:	4013      	ands	r3, r2
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <HAL_GPIO_Init+0x2cc>)
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	3301      	adds	r3, #1
 80025a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	40da      	lsrs	r2, r3
 80025ac:	1e13      	subs	r3, r2, #0
 80025ae:	d000      	beq.n	80025b2 <HAL_GPIO_Init+0x2b2>
 80025b0:	e6ae      	b.n	8002310 <HAL_GPIO_Init+0x10>
  } 
}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b006      	add	sp, #24
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40010000 	.word	0x40010000
 80025c4:	48000400 	.word	0x48000400
 80025c8:	48000800 	.word	0x48000800
 80025cc:	40010400 	.word	0x40010400

080025d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	000a      	movs	r2, r1
 80025da:	1cbb      	adds	r3, r7, #2
 80025dc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	1cba      	adds	r2, r7, #2
 80025e4:	8812      	ldrh	r2, [r2, #0]
 80025e6:	4013      	ands	r3, r2
 80025e8:	d004      	beq.n	80025f4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80025ea:	230f      	movs	r3, #15
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	e003      	b.n	80025fc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025f4:	230f      	movs	r3, #15
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80025fc:	230f      	movs	r3, #15
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	781b      	ldrb	r3, [r3, #0]
  }
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b004      	add	sp, #16
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	0002      	movs	r2, r0
 8002614:	1dbb      	adds	r3, r7, #6
 8002616:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	1dba      	adds	r2, r7, #6
 800261e:	8812      	ldrh	r2, [r2, #0]
 8002620:	4013      	ands	r3, r2
 8002622:	d008      	beq.n	8002636 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002624:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002626:	1dba      	adds	r2, r7, #6
 8002628:	8812      	ldrh	r2, [r2, #0]
 800262a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800262c:	1dbb      	adds	r3, r7, #6
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	0018      	movs	r0, r3
 8002632:	f7fe fb9f 	bl	8000d74 <HAL_GPIO_EXTI_Callback>
  }
}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	46bd      	mov	sp, r7
 800263a:	b002      	add	sp, #8
 800263c:	bd80      	pop	{r7, pc}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	40010400 	.word	0x40010400

08002644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d102      	bne.n	8002658 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	f000 fb76 	bl	8002d44 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2201      	movs	r2, #1
 800265e:	4013      	ands	r3, r2
 8002660:	d100      	bne.n	8002664 <HAL_RCC_OscConfig+0x20>
 8002662:	e08e      	b.n	8002782 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002664:	4bc5      	ldr	r3, [pc, #788]	; (800297c <HAL_RCC_OscConfig+0x338>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	220c      	movs	r2, #12
 800266a:	4013      	ands	r3, r2
 800266c:	2b04      	cmp	r3, #4
 800266e:	d00e      	beq.n	800268e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002670:	4bc2      	ldr	r3, [pc, #776]	; (800297c <HAL_RCC_OscConfig+0x338>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	220c      	movs	r2, #12
 8002676:	4013      	ands	r3, r2
 8002678:	2b08      	cmp	r3, #8
 800267a:	d117      	bne.n	80026ac <HAL_RCC_OscConfig+0x68>
 800267c:	4bbf      	ldr	r3, [pc, #764]	; (800297c <HAL_RCC_OscConfig+0x338>)
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	23c0      	movs	r3, #192	; 0xc0
 8002682:	025b      	lsls	r3, r3, #9
 8002684:	401a      	ands	r2, r3
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	025b      	lsls	r3, r3, #9
 800268a:	429a      	cmp	r2, r3
 800268c:	d10e      	bne.n	80026ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268e:	4bbb      	ldr	r3, [pc, #748]	; (800297c <HAL_RCC_OscConfig+0x338>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	029b      	lsls	r3, r3, #10
 8002696:	4013      	ands	r3, r2
 8002698:	d100      	bne.n	800269c <HAL_RCC_OscConfig+0x58>
 800269a:	e071      	b.n	8002780 <HAL_RCC_OscConfig+0x13c>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d000      	beq.n	80026a6 <HAL_RCC_OscConfig+0x62>
 80026a4:	e06c      	b.n	8002780 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	f000 fb4c 	bl	8002d44 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_OscConfig+0x80>
 80026b4:	4bb1      	ldr	r3, [pc, #708]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4bb0      	ldr	r3, [pc, #704]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80026ba:	2180      	movs	r1, #128	; 0x80
 80026bc:	0249      	lsls	r1, r1, #9
 80026be:	430a      	orrs	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	e02f      	b.n	8002724 <HAL_RCC_OscConfig+0xe0>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10c      	bne.n	80026e6 <HAL_RCC_OscConfig+0xa2>
 80026cc:	4bab      	ldr	r3, [pc, #684]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4baa      	ldr	r3, [pc, #680]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80026d2:	49ab      	ldr	r1, [pc, #684]	; (8002980 <HAL_RCC_OscConfig+0x33c>)
 80026d4:	400a      	ands	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	4ba8      	ldr	r3, [pc, #672]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4ba7      	ldr	r3, [pc, #668]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80026de:	49a9      	ldr	r1, [pc, #676]	; (8002984 <HAL_RCC_OscConfig+0x340>)
 80026e0:	400a      	ands	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	e01e      	b.n	8002724 <HAL_RCC_OscConfig+0xe0>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b05      	cmp	r3, #5
 80026ec:	d10e      	bne.n	800270c <HAL_RCC_OscConfig+0xc8>
 80026ee:	4ba3      	ldr	r3, [pc, #652]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	4ba2      	ldr	r3, [pc, #648]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80026f4:	2180      	movs	r1, #128	; 0x80
 80026f6:	02c9      	lsls	r1, r1, #11
 80026f8:	430a      	orrs	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	4b9f      	ldr	r3, [pc, #636]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b9e      	ldr	r3, [pc, #632]	; (800297c <HAL_RCC_OscConfig+0x338>)
 8002702:	2180      	movs	r1, #128	; 0x80
 8002704:	0249      	lsls	r1, r1, #9
 8002706:	430a      	orrs	r2, r1
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	e00b      	b.n	8002724 <HAL_RCC_OscConfig+0xe0>
 800270c:	4b9b      	ldr	r3, [pc, #620]	; (800297c <HAL_RCC_OscConfig+0x338>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b9a      	ldr	r3, [pc, #616]	; (800297c <HAL_RCC_OscConfig+0x338>)
 8002712:	499b      	ldr	r1, [pc, #620]	; (8002980 <HAL_RCC_OscConfig+0x33c>)
 8002714:	400a      	ands	r2, r1
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	4b98      	ldr	r3, [pc, #608]	; (800297c <HAL_RCC_OscConfig+0x338>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b97      	ldr	r3, [pc, #604]	; (800297c <HAL_RCC_OscConfig+0x338>)
 800271e:	4999      	ldr	r1, [pc, #612]	; (8002984 <HAL_RCC_OscConfig+0x340>)
 8002720:	400a      	ands	r2, r1
 8002722:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d014      	beq.n	8002756 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7fe fe7a 	bl	8001424 <HAL_GetTick>
 8002730:	0003      	movs	r3, r0
 8002732:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002736:	f7fe fe75 	bl	8001424 <HAL_GetTick>
 800273a:	0002      	movs	r2, r0
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b64      	cmp	r3, #100	; 0x64
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e2fd      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002748:	4b8c      	ldr	r3, [pc, #560]	; (800297c <HAL_RCC_OscConfig+0x338>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	029b      	lsls	r3, r3, #10
 8002750:	4013      	ands	r3, r2
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0xf2>
 8002754:	e015      	b.n	8002782 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002756:	f7fe fe65 	bl	8001424 <HAL_GetTick>
 800275a:	0003      	movs	r3, r0
 800275c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002760:	f7fe fe60 	bl	8001424 <HAL_GetTick>
 8002764:	0002      	movs	r2, r0
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e2e8      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002772:	4b82      	ldr	r3, [pc, #520]	; (800297c <HAL_RCC_OscConfig+0x338>)
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	029b      	lsls	r3, r3, #10
 800277a:	4013      	ands	r3, r2
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x11c>
 800277e:	e000      	b.n	8002782 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002780:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2202      	movs	r2, #2
 8002788:	4013      	ands	r3, r2
 800278a:	d100      	bne.n	800278e <HAL_RCC_OscConfig+0x14a>
 800278c:	e06c      	b.n	8002868 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800278e:	4b7b      	ldr	r3, [pc, #492]	; (800297c <HAL_RCC_OscConfig+0x338>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	220c      	movs	r2, #12
 8002794:	4013      	ands	r3, r2
 8002796:	d00e      	beq.n	80027b6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002798:	4b78      	ldr	r3, [pc, #480]	; (800297c <HAL_RCC_OscConfig+0x338>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	220c      	movs	r2, #12
 800279e:	4013      	ands	r3, r2
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d11f      	bne.n	80027e4 <HAL_RCC_OscConfig+0x1a0>
 80027a4:	4b75      	ldr	r3, [pc, #468]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	23c0      	movs	r3, #192	; 0xc0
 80027aa:	025b      	lsls	r3, r3, #9
 80027ac:	401a      	ands	r2, r3
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d116      	bne.n	80027e4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b6:	4b71      	ldr	r3, [pc, #452]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2202      	movs	r2, #2
 80027bc:	4013      	ands	r3, r2
 80027be:	d005      	beq.n	80027cc <HAL_RCC_OscConfig+0x188>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e2bb      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027cc:	4b6b      	ldr	r3, [pc, #428]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	22f8      	movs	r2, #248	; 0xf8
 80027d2:	4393      	bics	r3, r2
 80027d4:	0019      	movs	r1, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	00da      	lsls	r2, r3, #3
 80027dc:	4b67      	ldr	r3, [pc, #412]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80027de:	430a      	orrs	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e2:	e041      	b.n	8002868 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d024      	beq.n	8002836 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ec:	4b63      	ldr	r3, [pc, #396]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b62      	ldr	r3, [pc, #392]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80027f2:	2101      	movs	r1, #1
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe fe14 	bl	8001424 <HAL_GetTick>
 80027fc:	0003      	movs	r3, r0
 80027fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002802:	f7fe fe0f 	bl	8001424 <HAL_GetTick>
 8002806:	0002      	movs	r2, r0
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e297      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002814:	4b59      	ldr	r3, [pc, #356]	; (800297c <HAL_RCC_OscConfig+0x338>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2202      	movs	r2, #2
 800281a:	4013      	ands	r3, r2
 800281c:	d0f1      	beq.n	8002802 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281e:	4b57      	ldr	r3, [pc, #348]	; (800297c <HAL_RCC_OscConfig+0x338>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	22f8      	movs	r2, #248	; 0xf8
 8002824:	4393      	bics	r3, r2
 8002826:	0019      	movs	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	00da      	lsls	r2, r3, #3
 800282e:	4b53      	ldr	r3, [pc, #332]	; (800297c <HAL_RCC_OscConfig+0x338>)
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	e018      	b.n	8002868 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002836:	4b51      	ldr	r3, [pc, #324]	; (800297c <HAL_RCC_OscConfig+0x338>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4b50      	ldr	r3, [pc, #320]	; (800297c <HAL_RCC_OscConfig+0x338>)
 800283c:	2101      	movs	r1, #1
 800283e:	438a      	bics	r2, r1
 8002840:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002842:	f7fe fdef 	bl	8001424 <HAL_GetTick>
 8002846:	0003      	movs	r3, r0
 8002848:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800284c:	f7fe fdea 	bl	8001424 <HAL_GetTick>
 8002850:	0002      	movs	r2, r0
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e272      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285e:	4b47      	ldr	r3, [pc, #284]	; (800297c <HAL_RCC_OscConfig+0x338>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2202      	movs	r2, #2
 8002864:	4013      	ands	r3, r2
 8002866:	d1f1      	bne.n	800284c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2208      	movs	r2, #8
 800286e:	4013      	ands	r3, r2
 8002870:	d036      	beq.n	80028e0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d019      	beq.n	80028ae <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287a:	4b40      	ldr	r3, [pc, #256]	; (800297c <HAL_RCC_OscConfig+0x338>)
 800287c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800287e:	4b3f      	ldr	r3, [pc, #252]	; (800297c <HAL_RCC_OscConfig+0x338>)
 8002880:	2101      	movs	r1, #1
 8002882:	430a      	orrs	r2, r1
 8002884:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002886:	f7fe fdcd 	bl	8001424 <HAL_GetTick>
 800288a:	0003      	movs	r3, r0
 800288c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002890:	f7fe fdc8 	bl	8001424 <HAL_GetTick>
 8002894:	0002      	movs	r2, r0
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e250      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a2:	4b36      	ldr	r3, [pc, #216]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	2202      	movs	r2, #2
 80028a8:	4013      	ands	r3, r2
 80028aa:	d0f1      	beq.n	8002890 <HAL_RCC_OscConfig+0x24c>
 80028ac:	e018      	b.n	80028e0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ae:	4b33      	ldr	r3, [pc, #204]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80028b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028b2:	4b32      	ldr	r3, [pc, #200]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80028b4:	2101      	movs	r1, #1
 80028b6:	438a      	bics	r2, r1
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ba:	f7fe fdb3 	bl	8001424 <HAL_GetTick>
 80028be:	0003      	movs	r3, r0
 80028c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c4:	f7fe fdae 	bl	8001424 <HAL_GetTick>
 80028c8:	0002      	movs	r2, r0
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e236      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d6:	4b29      	ldr	r3, [pc, #164]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	2202      	movs	r2, #2
 80028dc:	4013      	ands	r3, r2
 80028de:	d1f1      	bne.n	80028c4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2204      	movs	r2, #4
 80028e6:	4013      	ands	r3, r2
 80028e8:	d100      	bne.n	80028ec <HAL_RCC_OscConfig+0x2a8>
 80028ea:	e0b5      	b.n	8002a58 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ec:	231f      	movs	r3, #31
 80028ee:	18fb      	adds	r3, r7, r3
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f4:	4b21      	ldr	r3, [pc, #132]	; (800297c <HAL_RCC_OscConfig+0x338>)
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	055b      	lsls	r3, r3, #21
 80028fc:	4013      	ands	r3, r2
 80028fe:	d111      	bne.n	8002924 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002900:	4b1e      	ldr	r3, [pc, #120]	; (800297c <HAL_RCC_OscConfig+0x338>)
 8002902:	69da      	ldr	r2, [r3, #28]
 8002904:	4b1d      	ldr	r3, [pc, #116]	; (800297c <HAL_RCC_OscConfig+0x338>)
 8002906:	2180      	movs	r1, #128	; 0x80
 8002908:	0549      	lsls	r1, r1, #21
 800290a:	430a      	orrs	r2, r1
 800290c:	61da      	str	r2, [r3, #28]
 800290e:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_RCC_OscConfig+0x338>)
 8002910:	69da      	ldr	r2, [r3, #28]
 8002912:	2380      	movs	r3, #128	; 0x80
 8002914:	055b      	lsls	r3, r3, #21
 8002916:	4013      	ands	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800291c:	231f      	movs	r3, #31
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002924:	4b18      	ldr	r3, [pc, #96]	; (8002988 <HAL_RCC_OscConfig+0x344>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4013      	ands	r3, r2
 800292e:	d11a      	bne.n	8002966 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002930:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_RCC_OscConfig+0x344>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4b14      	ldr	r3, [pc, #80]	; (8002988 <HAL_RCC_OscConfig+0x344>)
 8002936:	2180      	movs	r1, #128	; 0x80
 8002938:	0049      	lsls	r1, r1, #1
 800293a:	430a      	orrs	r2, r1
 800293c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293e:	f7fe fd71 	bl	8001424 <HAL_GetTick>
 8002942:	0003      	movs	r3, r0
 8002944:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002948:	f7fe fd6c 	bl	8001424 <HAL_GetTick>
 800294c:	0002      	movs	r2, r0
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	; 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e1f4      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_RCC_OscConfig+0x344>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	2380      	movs	r3, #128	; 0x80
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	4013      	ands	r3, r2
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d10e      	bne.n	800298c <HAL_RCC_OscConfig+0x348>
 800296e:	4b03      	ldr	r3, [pc, #12]	; (800297c <HAL_RCC_OscConfig+0x338>)
 8002970:	6a1a      	ldr	r2, [r3, #32]
 8002972:	4b02      	ldr	r3, [pc, #8]	; (800297c <HAL_RCC_OscConfig+0x338>)
 8002974:	2101      	movs	r1, #1
 8002976:	430a      	orrs	r2, r1
 8002978:	621a      	str	r2, [r3, #32]
 800297a:	e035      	b.n	80029e8 <HAL_RCC_OscConfig+0x3a4>
 800297c:	40021000 	.word	0x40021000
 8002980:	fffeffff 	.word	0xfffeffff
 8002984:	fffbffff 	.word	0xfffbffff
 8002988:	40007000 	.word	0x40007000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10c      	bne.n	80029ae <HAL_RCC_OscConfig+0x36a>
 8002994:	4bca      	ldr	r3, [pc, #808]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002996:	6a1a      	ldr	r2, [r3, #32]
 8002998:	4bc9      	ldr	r3, [pc, #804]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 800299a:	2101      	movs	r1, #1
 800299c:	438a      	bics	r2, r1
 800299e:	621a      	str	r2, [r3, #32]
 80029a0:	4bc7      	ldr	r3, [pc, #796]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 80029a2:	6a1a      	ldr	r2, [r3, #32]
 80029a4:	4bc6      	ldr	r3, [pc, #792]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 80029a6:	2104      	movs	r1, #4
 80029a8:	438a      	bics	r2, r1
 80029aa:	621a      	str	r2, [r3, #32]
 80029ac:	e01c      	b.n	80029e8 <HAL_RCC_OscConfig+0x3a4>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b05      	cmp	r3, #5
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x38c>
 80029b6:	4bc2      	ldr	r3, [pc, #776]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 80029b8:	6a1a      	ldr	r2, [r3, #32]
 80029ba:	4bc1      	ldr	r3, [pc, #772]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 80029bc:	2104      	movs	r1, #4
 80029be:	430a      	orrs	r2, r1
 80029c0:	621a      	str	r2, [r3, #32]
 80029c2:	4bbf      	ldr	r3, [pc, #764]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 80029c4:	6a1a      	ldr	r2, [r3, #32]
 80029c6:	4bbe      	ldr	r3, [pc, #760]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 80029c8:	2101      	movs	r1, #1
 80029ca:	430a      	orrs	r2, r1
 80029cc:	621a      	str	r2, [r3, #32]
 80029ce:	e00b      	b.n	80029e8 <HAL_RCC_OscConfig+0x3a4>
 80029d0:	4bbb      	ldr	r3, [pc, #748]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 80029d2:	6a1a      	ldr	r2, [r3, #32]
 80029d4:	4bba      	ldr	r3, [pc, #744]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 80029d6:	2101      	movs	r1, #1
 80029d8:	438a      	bics	r2, r1
 80029da:	621a      	str	r2, [r3, #32]
 80029dc:	4bb8      	ldr	r3, [pc, #736]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 80029de:	6a1a      	ldr	r2, [r3, #32]
 80029e0:	4bb7      	ldr	r3, [pc, #732]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 80029e2:	2104      	movs	r1, #4
 80029e4:	438a      	bics	r2, r1
 80029e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d014      	beq.n	8002a1a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f0:	f7fe fd18 	bl	8001424 <HAL_GetTick>
 80029f4:	0003      	movs	r3, r0
 80029f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f8:	e009      	b.n	8002a0e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029fa:	f7fe fd13 	bl	8001424 <HAL_GetTick>
 80029fe:	0002      	movs	r2, r0
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	4aaf      	ldr	r2, [pc, #700]	; (8002cc4 <HAL_RCC_OscConfig+0x680>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e19a      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0e:	4bac      	ldr	r3, [pc, #688]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	2202      	movs	r2, #2
 8002a14:	4013      	ands	r3, r2
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x3b6>
 8002a18:	e013      	b.n	8002a42 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fd03 	bl	8001424 <HAL_GetTick>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a22:	e009      	b.n	8002a38 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a24:	f7fe fcfe 	bl	8001424 <HAL_GetTick>
 8002a28:	0002      	movs	r2, r0
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	4aa5      	ldr	r2, [pc, #660]	; (8002cc4 <HAL_RCC_OscConfig+0x680>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e185      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a38:	4ba1      	ldr	r3, [pc, #644]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a42:	231f      	movs	r3, #31
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d105      	bne.n	8002a58 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4c:	4b9c      	ldr	r3, [pc, #624]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002a4e:	69da      	ldr	r2, [r3, #28]
 8002a50:	4b9b      	ldr	r3, [pc, #620]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002a52:	499d      	ldr	r1, [pc, #628]	; (8002cc8 <HAL_RCC_OscConfig+0x684>)
 8002a54:	400a      	ands	r2, r1
 8002a56:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d063      	beq.n	8002b2a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d12a      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a6a:	4b95      	ldr	r3, [pc, #596]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a6e:	4b94      	ldr	r3, [pc, #592]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002a70:	2104      	movs	r1, #4
 8002a72:	430a      	orrs	r2, r1
 8002a74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002a76:	4b92      	ldr	r3, [pc, #584]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a7a:	4b91      	ldr	r3, [pc, #580]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7fe fccf 	bl	8001424 <HAL_GetTick>
 8002a86:	0003      	movs	r3, r0
 8002a88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a8c:	f7fe fcca 	bl	8001424 <HAL_GetTick>
 8002a90:	0002      	movs	r2, r0
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e152      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a9e:	4b88      	ldr	r3, [pc, #544]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d0f1      	beq.n	8002a8c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002aa8:	4b85      	ldr	r3, [pc, #532]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aac:	22f8      	movs	r2, #248	; 0xf8
 8002aae:	4393      	bics	r3, r2
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	00da      	lsls	r2, r3, #3
 8002ab8:	4b81      	ldr	r3, [pc, #516]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002aba:	430a      	orrs	r2, r1
 8002abc:	635a      	str	r2, [r3, #52]	; 0x34
 8002abe:	e034      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	3305      	adds	r3, #5
 8002ac6:	d111      	bne.n	8002aec <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002ac8:	4b7d      	ldr	r3, [pc, #500]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002acc:	4b7c      	ldr	r3, [pc, #496]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002ace:	2104      	movs	r1, #4
 8002ad0:	438a      	bics	r2, r1
 8002ad2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ad4:	4b7a      	ldr	r3, [pc, #488]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad8:	22f8      	movs	r2, #248	; 0xf8
 8002ada:	4393      	bics	r3, r2
 8002adc:	0019      	movs	r1, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	00da      	lsls	r2, r3, #3
 8002ae4:	4b76      	ldr	r3, [pc, #472]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	635a      	str	r2, [r3, #52]	; 0x34
 8002aea:	e01e      	b.n	8002b2a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002aec:	4b74      	ldr	r3, [pc, #464]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af0:	4b73      	ldr	r3, [pc, #460]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002af2:	2104      	movs	r1, #4
 8002af4:	430a      	orrs	r2, r1
 8002af6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002af8:	4b71      	ldr	r3, [pc, #452]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002afc:	4b70      	ldr	r3, [pc, #448]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002afe:	2101      	movs	r1, #1
 8002b00:	438a      	bics	r2, r1
 8002b02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b04:	f7fe fc8e 	bl	8001424 <HAL_GetTick>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b0e:	f7fe fc89 	bl	8001424 <HAL_GetTick>
 8002b12:	0002      	movs	r2, r0
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e111      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b20:	4b67      	ldr	r3, [pc, #412]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b24:	2202      	movs	r2, #2
 8002b26:	4013      	ands	r3, r2
 8002b28:	d1f1      	bne.n	8002b0e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	4013      	ands	r3, r2
 8002b32:	d05c      	beq.n	8002bee <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002b34:	4b62      	ldr	r3, [pc, #392]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	220c      	movs	r2, #12
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b0c      	cmp	r3, #12
 8002b3e:	d00e      	beq.n	8002b5e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002b40:	4b5f      	ldr	r3, [pc, #380]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	220c      	movs	r2, #12
 8002b46:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d114      	bne.n	8002b76 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002b4c:	4b5c      	ldr	r3, [pc, #368]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	23c0      	movs	r3, #192	; 0xc0
 8002b52:	025b      	lsls	r3, r3, #9
 8002b54:	401a      	ands	r2, r3
 8002b56:	23c0      	movs	r3, #192	; 0xc0
 8002b58:	025b      	lsls	r3, r3, #9
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d10b      	bne.n	8002b76 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002b5e:	4b58      	ldr	r3, [pc, #352]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b62:	2380      	movs	r3, #128	; 0x80
 8002b64:	025b      	lsls	r3, r3, #9
 8002b66:	4013      	ands	r3, r2
 8002b68:	d040      	beq.n	8002bec <HAL_RCC_OscConfig+0x5a8>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d03c      	beq.n	8002bec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e0e6      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01b      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002b7e:	4b50      	ldr	r3, [pc, #320]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b82:	4b4f      	ldr	r3, [pc, #316]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002b84:	2180      	movs	r1, #128	; 0x80
 8002b86:	0249      	lsls	r1, r1, #9
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fc4a 	bl	8001424 <HAL_GetTick>
 8002b90:	0003      	movs	r3, r0
 8002b92:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b96:	f7fe fc45 	bl	8001424 <HAL_GetTick>
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e0cd      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002ba8:	4b45      	ldr	r3, [pc, #276]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	025b      	lsls	r3, r3, #9
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x552>
 8002bb4:	e01b      	b.n	8002bee <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002bb6:	4b42      	ldr	r3, [pc, #264]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bba:	4b41      	ldr	r3, [pc, #260]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002bbc:	4943      	ldr	r1, [pc, #268]	; (8002ccc <HAL_RCC_OscConfig+0x688>)
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc2:	f7fe fc2f 	bl	8001424 <HAL_GetTick>
 8002bc6:	0003      	movs	r3, r0
 8002bc8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bcc:	f7fe fc2a 	bl	8001424 <HAL_GetTick>
 8002bd0:	0002      	movs	r2, r0
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0b2      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002bde:	4b38      	ldr	r3, [pc, #224]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	025b      	lsls	r3, r3, #9
 8002be6:	4013      	ands	r3, r2
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x588>
 8002bea:	e000      	b.n	8002bee <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002bec:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d100      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x5b4>
 8002bf6:	e0a4      	b.n	8002d42 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bf8:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	220c      	movs	r2, #12
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d100      	bne.n	8002c06 <HAL_RCC_OscConfig+0x5c2>
 8002c04:	e078      	b.n	8002cf8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d14c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b2c      	ldr	r3, [pc, #176]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4b2b      	ldr	r3, [pc, #172]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002c14:	492e      	ldr	r1, [pc, #184]	; (8002cd0 <HAL_RCC_OscConfig+0x68c>)
 8002c16:	400a      	ands	r2, r1
 8002c18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fc03 	bl	8001424 <HAL_GetTick>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c24:	f7fe fbfe 	bl	8001424 <HAL_GetTick>
 8002c28:	0002      	movs	r2, r0
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e086      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c36:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	049b      	lsls	r3, r3, #18
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c42:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	220f      	movs	r2, #15
 8002c48:	4393      	bics	r3, r2
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002c52:	430a      	orrs	r2, r1
 8002c54:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c56:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4a1e      	ldr	r2, [pc, #120]	; (8002cd4 <HAL_RCC_OscConfig+0x690>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	0019      	movs	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	4b15      	ldr	r3, [pc, #84]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c70:	4b13      	ldr	r3, [pc, #76]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002c76:	2180      	movs	r1, #128	; 0x80
 8002c78:	0449      	lsls	r1, r1, #17
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7e:	f7fe fbd1 	bl	8001424 <HAL_GetTick>
 8002c82:	0003      	movs	r3, r0
 8002c84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe fbcc 	bl	8001424 <HAL_GetTick>
 8002c8c:	0002      	movs	r2, r0
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e054      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c9a:	4b09      	ldr	r3, [pc, #36]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	049b      	lsls	r3, r3, #18
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x644>
 8002ca6:	e04c      	b.n	8002d42 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca8:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <HAL_RCC_OscConfig+0x67c>)
 8002cae:	4908      	ldr	r1, [pc, #32]	; (8002cd0 <HAL_RCC_OscConfig+0x68c>)
 8002cb0:	400a      	ands	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fbb6 	bl	8001424 <HAL_GetTick>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbc:	e015      	b.n	8002cea <HAL_RCC_OscConfig+0x6a6>
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	00001388 	.word	0x00001388
 8002cc8:	efffffff 	.word	0xefffffff
 8002ccc:	fffeffff 	.word	0xfffeffff
 8002cd0:	feffffff 	.word	0xfeffffff
 8002cd4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd8:	f7fe fba4 	bl	8001424 <HAL_GetTick>
 8002cdc:	0002      	movs	r2, r0
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e02c      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cea:	4b18      	ldr	r3, [pc, #96]	; (8002d4c <HAL_RCC_OscConfig+0x708>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	049b      	lsls	r3, r3, #18
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x694>
 8002cf6:	e024      	b.n	8002d42 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e01f      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <HAL_RCC_OscConfig+0x708>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <HAL_RCC_OscConfig+0x708>)
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	23c0      	movs	r3, #192	; 0xc0
 8002d14:	025b      	lsls	r3, r3, #9
 8002d16:	401a      	ands	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d10e      	bne.n	8002d3e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	220f      	movs	r2, #15
 8002d24:	401a      	ands	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	23f0      	movs	r3, #240	; 0xf0
 8002d32:	039b      	lsls	r3, r3, #14
 8002d34:	401a      	ands	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d001      	beq.n	8002d42 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b008      	add	sp, #32
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40021000 	.word	0x40021000

08002d50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0bf      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d64:	4b61      	ldr	r3, [pc, #388]	; (8002eec <HAL_RCC_ClockConfig+0x19c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d911      	bls.n	8002d96 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b5e      	ldr	r3, [pc, #376]	; (8002eec <HAL_RCC_ClockConfig+0x19c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2201      	movs	r2, #1
 8002d78:	4393      	bics	r3, r2
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	4b5b      	ldr	r3, [pc, #364]	; (8002eec <HAL_RCC_ClockConfig+0x19c>)
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d84:	4b59      	ldr	r3, [pc, #356]	; (8002eec <HAL_RCC_ClockConfig+0x19c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e0a6      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d015      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2204      	movs	r2, #4
 8002da6:	4013      	ands	r3, r2
 8002da8:	d006      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002daa:	4b51      	ldr	r3, [pc, #324]	; (8002ef0 <HAL_RCC_ClockConfig+0x1a0>)
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	4b50      	ldr	r3, [pc, #320]	; (8002ef0 <HAL_RCC_ClockConfig+0x1a0>)
 8002db0:	21e0      	movs	r1, #224	; 0xe0
 8002db2:	00c9      	lsls	r1, r1, #3
 8002db4:	430a      	orrs	r2, r1
 8002db6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db8:	4b4d      	ldr	r3, [pc, #308]	; (8002ef0 <HAL_RCC_ClockConfig+0x1a0>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	22f0      	movs	r2, #240	; 0xf0
 8002dbe:	4393      	bics	r3, r2
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	4b4a      	ldr	r3, [pc, #296]	; (8002ef0 <HAL_RCC_ClockConfig+0x1a0>)
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d04c      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d107      	bne.n	8002dee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	4b44      	ldr	r3, [pc, #272]	; (8002ef0 <HAL_RCC_ClockConfig+0x1a0>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	029b      	lsls	r3, r3, #10
 8002de6:	4013      	ands	r3, r2
 8002de8:	d120      	bne.n	8002e2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e07a      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d107      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df6:	4b3e      	ldr	r3, [pc, #248]	; (8002ef0 <HAL_RCC_ClockConfig+0x1a0>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	049b      	lsls	r3, r3, #18
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d114      	bne.n	8002e2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e06e      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d107      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002e0e:	4b38      	ldr	r3, [pc, #224]	; (8002ef0 <HAL_RCC_ClockConfig+0x1a0>)
 8002e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	025b      	lsls	r3, r3, #9
 8002e16:	4013      	ands	r3, r2
 8002e18:	d108      	bne.n	8002e2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e062      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1e:	4b34      	ldr	r3, [pc, #208]	; (8002ef0 <HAL_RCC_ClockConfig+0x1a0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2202      	movs	r2, #2
 8002e24:	4013      	ands	r3, r2
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e05b      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e2c:	4b30      	ldr	r3, [pc, #192]	; (8002ef0 <HAL_RCC_ClockConfig+0x1a0>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2203      	movs	r2, #3
 8002e32:	4393      	bics	r3, r2
 8002e34:	0019      	movs	r1, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	4b2d      	ldr	r3, [pc, #180]	; (8002ef0 <HAL_RCC_ClockConfig+0x1a0>)
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e40:	f7fe faf0 	bl	8001424 <HAL_GetTick>
 8002e44:	0003      	movs	r3, r0
 8002e46:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e48:	e009      	b.n	8002e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e4a:	f7fe faeb 	bl	8001424 <HAL_GetTick>
 8002e4e:	0002      	movs	r2, r0
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	4a27      	ldr	r2, [pc, #156]	; (8002ef4 <HAL_RCC_ClockConfig+0x1a4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e042      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	4b24      	ldr	r3, [pc, #144]	; (8002ef0 <HAL_RCC_ClockConfig+0x1a0>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	220c      	movs	r2, #12
 8002e64:	401a      	ands	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d1ec      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e70:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <HAL_RCC_ClockConfig+0x19c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2201      	movs	r2, #1
 8002e76:	4013      	ands	r3, r2
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d211      	bcs.n	8002ea2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7e:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <HAL_RCC_ClockConfig+0x19c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2201      	movs	r2, #1
 8002e84:	4393      	bics	r3, r2
 8002e86:	0019      	movs	r1, r3
 8002e88:	4b18      	ldr	r3, [pc, #96]	; (8002eec <HAL_RCC_ClockConfig+0x19c>)
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e90:	4b16      	ldr	r3, [pc, #88]	; (8002eec <HAL_RCC_ClockConfig+0x19c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2201      	movs	r2, #1
 8002e96:	4013      	ands	r3, r2
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e020      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d009      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002eac:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <HAL_RCC_ClockConfig+0x1a0>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	4a11      	ldr	r2, [pc, #68]	; (8002ef8 <HAL_RCC_ClockConfig+0x1a8>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	0019      	movs	r1, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <HAL_RCC_ClockConfig+0x1a0>)
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ec0:	f000 f820 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8002ec4:	0001      	movs	r1, r0
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_RCC_ClockConfig+0x1a0>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	220f      	movs	r2, #15
 8002ece:	4013      	ands	r3, r2
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <HAL_RCC_ClockConfig+0x1ac>)
 8002ed2:	5cd3      	ldrb	r3, [r2, r3]
 8002ed4:	000a      	movs	r2, r1
 8002ed6:	40da      	lsrs	r2, r3
 8002ed8:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_RCC_ClockConfig+0x1b0>)
 8002eda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002edc:	2000      	movs	r0, #0
 8002ede:	f7fe fa5b 	bl	8001398 <HAL_InitTick>
  
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b004      	add	sp, #16
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40022000 	.word	0x40022000
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	00001388 	.word	0x00001388
 8002ef8:	fffff8ff 	.word	0xfffff8ff
 8002efc:	08003dd0 	.word	0x08003dd0
 8002f00:	20000000 	.word	0x20000000

08002f04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b08f      	sub	sp, #60	; 0x3c
 8002f08:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002f0a:	2314      	movs	r3, #20
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	4a37      	ldr	r2, [pc, #220]	; (8002fec <HAL_RCC_GetSysClockFreq+0xe8>)
 8002f10:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f12:	c313      	stmia	r3!, {r0, r1, r4}
 8002f14:	6812      	ldr	r2, [r2, #0]
 8002f16:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002f18:	1d3b      	adds	r3, r7, #4
 8002f1a:	4a35      	ldr	r2, [pc, #212]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0xec>)
 8002f1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f1e:	c313      	stmia	r3!, {r0, r1, r4}
 8002f20:	6812      	ldr	r2, [r2, #0]
 8002f22:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f28:	2300      	movs	r3, #0
 8002f2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002f30:	2300      	movs	r3, #0
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002f38:	4b2e      	ldr	r3, [pc, #184]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f40:	220c      	movs	r2, #12
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d006      	beq.n	8002f56 <HAL_RCC_GetSysClockFreq+0x52>
 8002f48:	2b0c      	cmp	r3, #12
 8002f4a:	d043      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0xd0>
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d144      	bne.n	8002fda <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f50:	4b29      	ldr	r3, [pc, #164]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002f52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f54:	e044      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	0c9b      	lsrs	r3, r3, #18
 8002f5a:	220f      	movs	r2, #15
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2214      	movs	r2, #20
 8002f60:	18ba      	adds	r2, r7, r2
 8002f62:	5cd3      	ldrb	r3, [r2, r3]
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002f66:	4b23      	ldr	r3, [pc, #140]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	220f      	movs	r2, #15
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	1d3a      	adds	r2, r7, #4
 8002f70:	5cd3      	ldrb	r3, [r2, r3]
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f76:	23c0      	movs	r3, #192	; 0xc0
 8002f78:	025b      	lsls	r3, r3, #9
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	025b      	lsls	r3, r3, #9
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d109      	bne.n	8002f98 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f86:	481c      	ldr	r0, [pc, #112]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002f88:	f7fd f8be 	bl	8000108 <__udivsi3>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	001a      	movs	r2, r3
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	4353      	muls	r3, r2
 8002f94:	637b      	str	r3, [r7, #52]	; 0x34
 8002f96:	e01a      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f9a:	23c0      	movs	r3, #192	; 0xc0
 8002f9c:	025b      	lsls	r3, r3, #9
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	23c0      	movs	r3, #192	; 0xc0
 8002fa2:	025b      	lsls	r3, r3, #9
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d109      	bne.n	8002fbc <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002faa:	4814      	ldr	r0, [pc, #80]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fac:	f7fd f8ac 	bl	8000108 <__udivsi3>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	001a      	movs	r2, r3
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	4353      	muls	r3, r2
 8002fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fba:	e008      	b.n	8002fce <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fbe:	480e      	ldr	r0, [pc, #56]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002fc0:	f7fd f8a2 	bl	8000108 <__udivsi3>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	001a      	movs	r2, r3
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	4353      	muls	r3, r2
 8002fcc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fd2:	e005      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002fd4:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fd6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fd8:	e002      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fda:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002fdc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fde:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b00f      	add	sp, #60	; 0x3c
 8002fe8:	bd90      	pop	{r4, r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	08003d2c 	.word	0x08003d2c
 8002ff0:	08003d3c 	.word	0x08003d3c
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	007a1200 	.word	0x007a1200
 8002ffc:	02dc6c00 	.word	0x02dc6c00

08003000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e01e      	b.n	8003050 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	223d      	movs	r2, #61	; 0x3d
 8003016:	5c9b      	ldrb	r3, [r3, r2]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d107      	bne.n	800302e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	223c      	movs	r2, #60	; 0x3c
 8003022:	2100      	movs	r1, #0
 8003024:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	0018      	movs	r0, r3
 800302a:	f7fd ffe1 	bl	8000ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	223d      	movs	r2, #61	; 0x3d
 8003032:	2102      	movs	r1, #2
 8003034:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3304      	adds	r3, #4
 800303e:	0019      	movs	r1, r3
 8003040:	0010      	movs	r0, r2
 8003042:	f000 fa71 	bl	8003528 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	223d      	movs	r2, #61	; 0x3d
 800304a:	2101      	movs	r1, #1
 800304c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	b002      	add	sp, #8
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	223d      	movs	r2, #61	; 0x3d
 8003064:	2102      	movs	r1, #2
 8003066:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2207      	movs	r2, #7
 8003070:	4013      	ands	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b06      	cmp	r3, #6
 8003078:	d007      	beq.n	800308a <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2101      	movs	r1, #1
 8003086:	430a      	orrs	r2, r1
 8003088:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	223d      	movs	r2, #61	; 0x3d
 800308e:	2101      	movs	r1, #1
 8003090:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	0018      	movs	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	b004      	add	sp, #16
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e01e      	b.n	80030ec <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	223d      	movs	r2, #61	; 0x3d
 80030b2:	5c9b      	ldrb	r3, [r3, r2]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d107      	bne.n	80030ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	223c      	movs	r2, #60	; 0x3c
 80030be:	2100      	movs	r1, #0
 80030c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	0018      	movs	r0, r3
 80030c6:	f7fd ffc9 	bl	800105c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	223d      	movs	r2, #61	; 0x3d
 80030ce:	2102      	movs	r1, #2
 80030d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3304      	adds	r3, #4
 80030da:	0019      	movs	r1, r3
 80030dc:	0010      	movs	r0, r2
 80030de:	f000 fa23 	bl	8003528 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	223d      	movs	r2, #61	; 0x3d
 80030e6:	2101      	movs	r1, #1
 80030e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	0018      	movs	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6839      	ldr	r1, [r7, #0]
 8003104:	2201      	movs	r2, #1
 8003106:	0018      	movs	r0, r3
 8003108:	f000 fcfe 	bl	8003b08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a18      	ldr	r2, [pc, #96]	; (8003174 <HAL_TIM_PWM_Start+0x80>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d009      	beq.n	800312a <HAL_TIM_PWM_Start+0x36>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a17      	ldr	r2, [pc, #92]	; (8003178 <HAL_TIM_PWM_Start+0x84>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d004      	beq.n	800312a <HAL_TIM_PWM_Start+0x36>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a15      	ldr	r2, [pc, #84]	; (800317c <HAL_TIM_PWM_Start+0x88>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d101      	bne.n	800312e <HAL_TIM_PWM_Start+0x3a>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <HAL_TIM_PWM_Start+0x3c>
 800312e:	2300      	movs	r3, #0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_TIM_PWM_Start+0x52>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2180      	movs	r1, #128	; 0x80
 8003140:	0209      	lsls	r1, r1, #8
 8003142:	430a      	orrs	r2, r1
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2207      	movs	r2, #7
 800314e:	4013      	ands	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b06      	cmp	r3, #6
 8003156:	d007      	beq.n	8003168 <HAL_TIM_PWM_Start+0x74>
  {
    __HAL_TIM_ENABLE(htim);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2101      	movs	r1, #1
 8003164:	430a      	orrs	r2, r1
 8003166:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	0018      	movs	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	b004      	add	sp, #16
 8003170:	bd80      	pop	{r7, pc}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	40012c00 	.word	0x40012c00
 8003178:	40014400 	.word	0x40014400
 800317c:	40014800 	.word	0x40014800

08003180 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6839      	ldr	r1, [r7, #0]
 8003190:	2200      	movs	r2, #0
 8003192:	0018      	movs	r0, r3
 8003194:	f000 fcb8 	bl	8003b08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a21      	ldr	r2, [pc, #132]	; (8003224 <HAL_TIM_PWM_Stop+0xa4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d009      	beq.n	80031b6 <HAL_TIM_PWM_Stop+0x36>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a20      	ldr	r2, [pc, #128]	; (8003228 <HAL_TIM_PWM_Stop+0xa8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d004      	beq.n	80031b6 <HAL_TIM_PWM_Stop+0x36>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a1e      	ldr	r2, [pc, #120]	; (800322c <HAL_TIM_PWM_Stop+0xac>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d101      	bne.n	80031ba <HAL_TIM_PWM_Stop+0x3a>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <HAL_TIM_PWM_Stop+0x3c>
 80031ba:	2300      	movs	r3, #0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d013      	beq.n	80031e8 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a1a      	ldr	r2, [pc, #104]	; (8003230 <HAL_TIM_PWM_Stop+0xb0>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	d10d      	bne.n	80031e8 <HAL_TIM_PWM_Stop+0x68>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	4a18      	ldr	r2, [pc, #96]	; (8003234 <HAL_TIM_PWM_Stop+0xb4>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	d107      	bne.n	80031e8 <HAL_TIM_PWM_Stop+0x68>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4915      	ldr	r1, [pc, #84]	; (8003238 <HAL_TIM_PWM_Stop+0xb8>)
 80031e4:	400a      	ands	r2, r1
 80031e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4a10      	ldr	r2, [pc, #64]	; (8003230 <HAL_TIM_PWM_Stop+0xb0>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	d10d      	bne.n	8003210 <HAL_TIM_PWM_Stop+0x90>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	4a0e      	ldr	r2, [pc, #56]	; (8003234 <HAL_TIM_PWM_Stop+0xb4>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	d107      	bne.n	8003210 <HAL_TIM_PWM_Stop+0x90>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2101      	movs	r1, #1
 800320c:	438a      	bics	r2, r1
 800320e:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	223d      	movs	r2, #61	; 0x3d
 8003214:	2101      	movs	r1, #1
 8003216:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	0018      	movs	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	b002      	add	sp, #8
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	40012c00 	.word	0x40012c00
 8003228:	40014400 	.word	0x40014400
 800322c:	40014800 	.word	0x40014800
 8003230:	00001111 	.word	0x00001111
 8003234:	00000444 	.word	0x00000444
 8003238:	ffff7fff 	.word	0xffff7fff

0800323c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	223c      	movs	r2, #60	; 0x3c
 800324c:	5c9b      	ldrb	r3, [r3, r2]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003252:	2302      	movs	r3, #2
 8003254:	e0a4      	b.n	80033a0 <HAL_TIM_PWM_ConfigChannel+0x164>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	223c      	movs	r2, #60	; 0x3c
 800325a:	2101      	movs	r1, #1
 800325c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	223d      	movs	r2, #61	; 0x3d
 8003262:	2102      	movs	r1, #2
 8003264:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b04      	cmp	r3, #4
 800326a:	d029      	beq.n	80032c0 <HAL_TIM_PWM_ConfigChannel+0x84>
 800326c:	d802      	bhi.n	8003274 <HAL_TIM_PWM_ConfigChannel+0x38>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8003272:	e08c      	b.n	800338e <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8003274:	2b08      	cmp	r3, #8
 8003276:	d046      	beq.n	8003306 <HAL_TIM_PWM_ConfigChannel+0xca>
 8003278:	2b0c      	cmp	r3, #12
 800327a:	d065      	beq.n	8003348 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 800327c:	e087      	b.n	800338e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	0011      	movs	r1, r2
 8003286:	0018      	movs	r0, r3
 8003288:	f000 f9c4 	bl	8003614 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2108      	movs	r1, #8
 8003298:	430a      	orrs	r2, r1
 800329a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699a      	ldr	r2, [r3, #24]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2104      	movs	r1, #4
 80032a8:	438a      	bics	r2, r1
 80032aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6999      	ldr	r1, [r3, #24]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	619a      	str	r2, [r3, #24]
      break;
 80032be:	e066      	b.n	800338e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	0011      	movs	r1, r2
 80032c8:	0018      	movs	r0, r3
 80032ca:	f000 fa21 	bl	8003710 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	699a      	ldr	r2, [r3, #24]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2180      	movs	r1, #128	; 0x80
 80032da:	0109      	lsls	r1, r1, #4
 80032dc:	430a      	orrs	r2, r1
 80032de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	492f      	ldr	r1, [pc, #188]	; (80033a8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80032ec:	400a      	ands	r2, r1
 80032ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6999      	ldr	r1, [r3, #24]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	021a      	lsls	r2, r3, #8
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	619a      	str	r2, [r3, #24]
      break;
 8003304:	e043      	b.n	800338e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	0011      	movs	r1, r2
 800330e:	0018      	movs	r0, r3
 8003310:	f000 fa7c 	bl	800380c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69da      	ldr	r2, [r3, #28]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2108      	movs	r1, #8
 8003320:	430a      	orrs	r2, r1
 8003322:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2104      	movs	r1, #4
 8003330:	438a      	bics	r2, r1
 8003332:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	69d9      	ldr	r1, [r3, #28]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	61da      	str	r2, [r3, #28]
      break;
 8003346:	e022      	b.n	800338e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	0011      	movs	r1, r2
 8003350:	0018      	movs	r0, r3
 8003352:	f000 fadb 	bl	800390c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69da      	ldr	r2, [r3, #28]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2180      	movs	r1, #128	; 0x80
 8003362:	0109      	lsls	r1, r1, #4
 8003364:	430a      	orrs	r2, r1
 8003366:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	69da      	ldr	r2, [r3, #28]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	490d      	ldr	r1, [pc, #52]	; (80033a8 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8003374:	400a      	ands	r2, r1
 8003376:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69d9      	ldr	r1, [r3, #28]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	021a      	lsls	r2, r3, #8
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	61da      	str	r2, [r3, #28]
      break;
 800338c:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	223d      	movs	r2, #61	; 0x3d
 8003392:	2101      	movs	r1, #1
 8003394:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	223c      	movs	r2, #60	; 0x3c
 800339a:	2100      	movs	r1, #0
 800339c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	0018      	movs	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b004      	add	sp, #16
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	fffffbff 	.word	0xfffffbff

080033ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	223c      	movs	r2, #60	; 0x3c
 80033ba:	5c9b      	ldrb	r3, [r3, r2]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_TIM_ConfigClockSource+0x18>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e0ab      	b.n	800351c <HAL_TIM_ConfigClockSource+0x170>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	223c      	movs	r2, #60	; 0x3c
 80033c8:	2101      	movs	r1, #1
 80033ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	223d      	movs	r2, #61	; 0x3d
 80033d0:	2102      	movs	r1, #2
 80033d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2277      	movs	r2, #119	; 0x77
 80033e0:	4393      	bics	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4a4f      	ldr	r2, [pc, #316]	; (8003524 <HAL_TIM_ConfigClockSource+0x178>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d100      	bne.n	80033fe <HAL_TIM_ConfigClockSource+0x52>
 80033fc:	e06b      	b.n	80034d6 <HAL_TIM_ConfigClockSource+0x12a>
 80033fe:	d80e      	bhi.n	800341e <HAL_TIM_ConfigClockSource+0x72>
 8003400:	2b10      	cmp	r3, #16
 8003402:	d100      	bne.n	8003406 <HAL_TIM_ConfigClockSource+0x5a>
 8003404:	e077      	b.n	80034f6 <HAL_TIM_ConfigClockSource+0x14a>
 8003406:	d803      	bhi.n	8003410 <HAL_TIM_ConfigClockSource+0x64>
 8003408:	2b00      	cmp	r3, #0
 800340a:	d100      	bne.n	800340e <HAL_TIM_ConfigClockSource+0x62>
 800340c:	e073      	b.n	80034f6 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800340e:	e07c      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003410:	2b20      	cmp	r3, #32
 8003412:	d100      	bne.n	8003416 <HAL_TIM_ConfigClockSource+0x6a>
 8003414:	e06f      	b.n	80034f6 <HAL_TIM_ConfigClockSource+0x14a>
 8003416:	2b30      	cmp	r3, #48	; 0x30
 8003418:	d100      	bne.n	800341c <HAL_TIM_ConfigClockSource+0x70>
 800341a:	e06c      	b.n	80034f6 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800341c:	e075      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800341e:	2b70      	cmp	r3, #112	; 0x70
 8003420:	d00e      	beq.n	8003440 <HAL_TIM_ConfigClockSource+0x94>
 8003422:	d804      	bhi.n	800342e <HAL_TIM_ConfigClockSource+0x82>
 8003424:	2b50      	cmp	r3, #80	; 0x50
 8003426:	d036      	beq.n	8003496 <HAL_TIM_ConfigClockSource+0xea>
 8003428:	2b60      	cmp	r3, #96	; 0x60
 800342a:	d044      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800342c:	e06d      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	0152      	lsls	r2, r2, #5
 8003432:	4293      	cmp	r3, r2
 8003434:	d068      	beq.n	8003508 <HAL_TIM_ConfigClockSource+0x15c>
 8003436:	2280      	movs	r2, #128	; 0x80
 8003438:	0192      	lsls	r2, r2, #6
 800343a:	4293      	cmp	r3, r2
 800343c:	d017      	beq.n	800346e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800343e:	e064      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6899      	ldr	r1, [r3, #8]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f000 fb3a 	bl	8003ac8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2277      	movs	r2, #119	; 0x77
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	609a      	str	r2, [r3, #8]
      break;
 800346c:	e04d      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	6899      	ldr	r1, [r3, #8]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f000 fb23 	bl	8003ac8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2180      	movs	r1, #128	; 0x80
 800348e:	01c9      	lsls	r1, r1, #7
 8003490:	430a      	orrs	r2, r1
 8003492:	609a      	str	r2, [r3, #8]
      break;
 8003494:	e039      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6859      	ldr	r1, [r3, #4]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	001a      	movs	r2, r3
 80034a4:	f000 fa96 	bl	80039d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2150      	movs	r1, #80	; 0x50
 80034ae:	0018      	movs	r0, r3
 80034b0:	f000 faf0 	bl	8003a94 <TIM_ITRx_SetConfig>
      break;
 80034b4:	e029      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6859      	ldr	r1, [r3, #4]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	001a      	movs	r2, r3
 80034c4:	f000 fab4 	bl	8003a30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2160      	movs	r1, #96	; 0x60
 80034ce:	0018      	movs	r0, r3
 80034d0:	f000 fae0 	bl	8003a94 <TIM_ITRx_SetConfig>
      break;
 80034d4:	e019      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6859      	ldr	r1, [r3, #4]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	001a      	movs	r2, r3
 80034e4:	f000 fa76 	bl	80039d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2140      	movs	r1, #64	; 0x40
 80034ee:	0018      	movs	r0, r3
 80034f0:	f000 fad0 	bl	8003a94 <TIM_ITRx_SetConfig>
      break;
 80034f4:	e009      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	0019      	movs	r1, r3
 8003500:	0010      	movs	r0, r2
 8003502:	f000 fac7 	bl	8003a94 <TIM_ITRx_SetConfig>
      break;
 8003506:	e000      	b.n	800350a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003508:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	223d      	movs	r2, #61	; 0x3d
 800350e:	2101      	movs	r1, #1
 8003510:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	223c      	movs	r2, #60	; 0x3c
 8003516:	2100      	movs	r1, #0
 8003518:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b004      	add	sp, #16
 8003522:	bd80      	pop	{r7, pc}
 8003524:	ffff00ff 	.word	0xffff00ff

08003528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a30      	ldr	r2, [pc, #192]	; (80035fc <TIM_Base_SetConfig+0xd4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d008      	beq.n	8003552 <TIM_Base_SetConfig+0x2a>
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	05db      	lsls	r3, r3, #23
 8003546:	429a      	cmp	r2, r3
 8003548:	d003      	beq.n	8003552 <TIM_Base_SetConfig+0x2a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a2c      	ldr	r2, [pc, #176]	; (8003600 <TIM_Base_SetConfig+0xd8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d108      	bne.n	8003564 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2270      	movs	r2, #112	; 0x70
 8003556:	4393      	bics	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4313      	orrs	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a25      	ldr	r2, [pc, #148]	; (80035fc <TIM_Base_SetConfig+0xd4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d014      	beq.n	8003596 <TIM_Base_SetConfig+0x6e>
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	2380      	movs	r3, #128	; 0x80
 8003570:	05db      	lsls	r3, r3, #23
 8003572:	429a      	cmp	r2, r3
 8003574:	d00f      	beq.n	8003596 <TIM_Base_SetConfig+0x6e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a21      	ldr	r2, [pc, #132]	; (8003600 <TIM_Base_SetConfig+0xd8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00b      	beq.n	8003596 <TIM_Base_SetConfig+0x6e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a20      	ldr	r2, [pc, #128]	; (8003604 <TIM_Base_SetConfig+0xdc>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d007      	beq.n	8003596 <TIM_Base_SetConfig+0x6e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a1f      	ldr	r2, [pc, #124]	; (8003608 <TIM_Base_SetConfig+0xe0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d003      	beq.n	8003596 <TIM_Base_SetConfig+0x6e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a1e      	ldr	r2, [pc, #120]	; (800360c <TIM_Base_SetConfig+0xe4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d108      	bne.n	80035a8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4a1d      	ldr	r2, [pc, #116]	; (8003610 <TIM_Base_SetConfig+0xe8>)
 800359a:	4013      	ands	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2280      	movs	r2, #128	; 0x80
 80035ac:	4393      	bics	r3, r2
 80035ae:	001a      	movs	r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <TIM_Base_SetConfig+0xd4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d007      	beq.n	80035e6 <TIM_Base_SetConfig+0xbe>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a0b      	ldr	r2, [pc, #44]	; (8003608 <TIM_Base_SetConfig+0xe0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d003      	beq.n	80035e6 <TIM_Base_SetConfig+0xbe>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a0a      	ldr	r2, [pc, #40]	; (800360c <TIM_Base_SetConfig+0xe4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d103      	bne.n	80035ee <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	615a      	str	r2, [r3, #20]
}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b004      	add	sp, #16
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40012c00 	.word	0x40012c00
 8003600:	40000400 	.word	0x40000400
 8003604:	40002000 	.word	0x40002000
 8003608:	40014400 	.word	0x40014400
 800360c:	40014800 	.word	0x40014800
 8003610:	fffffcff 	.word	0xfffffcff

08003614 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	2201      	movs	r2, #1
 8003624:	4393      	bics	r3, r2
 8003626:	001a      	movs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2270      	movs	r2, #112	; 0x70
 8003642:	4393      	bics	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2203      	movs	r2, #3
 800364a:	4393      	bics	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2202      	movs	r2, #2
 800365c:	4393      	bics	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a23      	ldr	r2, [pc, #140]	; (80036fc <TIM_OC1_SetConfig+0xe8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d007      	beq.n	8003682 <TIM_OC1_SetConfig+0x6e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a22      	ldr	r2, [pc, #136]	; (8003700 <TIM_OC1_SetConfig+0xec>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d003      	beq.n	8003682 <TIM_OC1_SetConfig+0x6e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a21      	ldr	r2, [pc, #132]	; (8003704 <TIM_OC1_SetConfig+0xf0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d10c      	bne.n	800369c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2208      	movs	r2, #8
 8003686:	4393      	bics	r3, r2
 8003688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2204      	movs	r2, #4
 8003698:	4393      	bics	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a17      	ldr	r2, [pc, #92]	; (80036fc <TIM_OC1_SetConfig+0xe8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d007      	beq.n	80036b4 <TIM_OC1_SetConfig+0xa0>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a16      	ldr	r2, [pc, #88]	; (8003700 <TIM_OC1_SetConfig+0xec>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d003      	beq.n	80036b4 <TIM_OC1_SetConfig+0xa0>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a15      	ldr	r2, [pc, #84]	; (8003704 <TIM_OC1_SetConfig+0xf0>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d111      	bne.n	80036d8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4a14      	ldr	r2, [pc, #80]	; (8003708 <TIM_OC1_SetConfig+0xf4>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4a13      	ldr	r2, [pc, #76]	; (800370c <TIM_OC1_SetConfig+0xf8>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	621a      	str	r2, [r3, #32]
}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	46bd      	mov	sp, r7
 80036f6:	b006      	add	sp, #24
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40014400 	.word	0x40014400
 8003704:	40014800 	.word	0x40014800
 8003708:	fffffeff 	.word	0xfffffeff
 800370c:	fffffdff 	.word	0xfffffdff

08003710 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	2210      	movs	r2, #16
 8003720:	4393      	bics	r3, r2
 8003722:	001a      	movs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4a2c      	ldr	r2, [pc, #176]	; (80037f0 <TIM_OC2_SetConfig+0xe0>)
 800373e:	4013      	ands	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4a2b      	ldr	r2, [pc, #172]	; (80037f4 <TIM_OC2_SetConfig+0xe4>)
 8003746:	4013      	ands	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2220      	movs	r2, #32
 800375a:	4393      	bics	r3, r2
 800375c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a22      	ldr	r2, [pc, #136]	; (80037f8 <TIM_OC2_SetConfig+0xe8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d10d      	bne.n	800378e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2280      	movs	r2, #128	; 0x80
 8003776:	4393      	bics	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2240      	movs	r2, #64	; 0x40
 800378a:	4393      	bics	r3, r2
 800378c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a19      	ldr	r2, [pc, #100]	; (80037f8 <TIM_OC2_SetConfig+0xe8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d007      	beq.n	80037a6 <TIM_OC2_SetConfig+0x96>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a18      	ldr	r2, [pc, #96]	; (80037fc <TIM_OC2_SetConfig+0xec>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d003      	beq.n	80037a6 <TIM_OC2_SetConfig+0x96>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a17      	ldr	r2, [pc, #92]	; (8003800 <TIM_OC2_SetConfig+0xf0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d113      	bne.n	80037ce <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4a16      	ldr	r2, [pc, #88]	; (8003804 <TIM_OC2_SetConfig+0xf4>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4a15      	ldr	r2, [pc, #84]	; (8003808 <TIM_OC2_SetConfig+0xf8>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	621a      	str	r2, [r3, #32]
}
 80037e8:	46c0      	nop			; (mov r8, r8)
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b006      	add	sp, #24
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	ffff8fff 	.word	0xffff8fff
 80037f4:	fffffcff 	.word	0xfffffcff
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40014400 	.word	0x40014400
 8003800:	40014800 	.word	0x40014800
 8003804:	fffffbff 	.word	0xfffffbff
 8003808:	fffff7ff 	.word	0xfffff7ff

0800380c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	4a33      	ldr	r2, [pc, #204]	; (80038e8 <TIM_OC3_SetConfig+0xdc>)
 800381c:	401a      	ands	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2270      	movs	r2, #112	; 0x70
 8003838:	4393      	bics	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2203      	movs	r2, #3
 8003840:	4393      	bics	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	4a26      	ldr	r2, [pc, #152]	; (80038ec <TIM_OC3_SetConfig+0xe0>)
 8003852:	4013      	ands	r3, r2
 8003854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	021b      	lsls	r3, r3, #8
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a22      	ldr	r2, [pc, #136]	; (80038f0 <TIM_OC3_SetConfig+0xe4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d10d      	bne.n	8003886 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	4a21      	ldr	r2, [pc, #132]	; (80038f4 <TIM_OC3_SetConfig+0xe8>)
 800386e:	4013      	ands	r3, r2
 8003870:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	4a1d      	ldr	r2, [pc, #116]	; (80038f8 <TIM_OC3_SetConfig+0xec>)
 8003882:	4013      	ands	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a19      	ldr	r2, [pc, #100]	; (80038f0 <TIM_OC3_SetConfig+0xe4>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d007      	beq.n	800389e <TIM_OC3_SetConfig+0x92>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a1a      	ldr	r2, [pc, #104]	; (80038fc <TIM_OC3_SetConfig+0xf0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d003      	beq.n	800389e <TIM_OC3_SetConfig+0x92>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a19      	ldr	r2, [pc, #100]	; (8003900 <TIM_OC3_SetConfig+0xf4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d113      	bne.n	80038c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4a18      	ldr	r2, [pc, #96]	; (8003904 <TIM_OC3_SetConfig+0xf8>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4a17      	ldr	r2, [pc, #92]	; (8003908 <TIM_OC3_SetConfig+0xfc>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	621a      	str	r2, [r3, #32]
}
 80038e0:	46c0      	nop			; (mov r8, r8)
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b006      	add	sp, #24
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	fffffeff 	.word	0xfffffeff
 80038ec:	fffffdff 	.word	0xfffffdff
 80038f0:	40012c00 	.word	0x40012c00
 80038f4:	fffff7ff 	.word	0xfffff7ff
 80038f8:	fffffbff 	.word	0xfffffbff
 80038fc:	40014400 	.word	0x40014400
 8003900:	40014800 	.word	0x40014800
 8003904:	ffffefff 	.word	0xffffefff
 8003908:	ffffdfff 	.word	0xffffdfff

0800390c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	4a26      	ldr	r2, [pc, #152]	; (80039b4 <TIM_OC4_SetConfig+0xa8>)
 800391c:	401a      	ands	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4a20      	ldr	r2, [pc, #128]	; (80039b8 <TIM_OC4_SetConfig+0xac>)
 8003938:	4013      	ands	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <TIM_OC4_SetConfig+0xb0>)
 8003940:	4013      	ands	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4313      	orrs	r3, r2
 800394e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4a1b      	ldr	r2, [pc, #108]	; (80039c0 <TIM_OC4_SetConfig+0xb4>)
 8003954:	4013      	ands	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	031b      	lsls	r3, r3, #12
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a17      	ldr	r2, [pc, #92]	; (80039c4 <TIM_OC4_SetConfig+0xb8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d007      	beq.n	800397c <TIM_OC4_SetConfig+0x70>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a16      	ldr	r2, [pc, #88]	; (80039c8 <TIM_OC4_SetConfig+0xbc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d003      	beq.n	800397c <TIM_OC4_SetConfig+0x70>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a15      	ldr	r2, [pc, #84]	; (80039cc <TIM_OC4_SetConfig+0xc0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d109      	bne.n	8003990 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	4a14      	ldr	r2, [pc, #80]	; (80039d0 <TIM_OC4_SetConfig+0xc4>)
 8003980:	4013      	ands	r3, r2
 8003982:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	019b      	lsls	r3, r3, #6
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	621a      	str	r2, [r3, #32]
}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b006      	add	sp, #24
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	ffffefff 	.word	0xffffefff
 80039b8:	ffff8fff 	.word	0xffff8fff
 80039bc:	fffffcff 	.word	0xfffffcff
 80039c0:	ffffdfff 	.word	0xffffdfff
 80039c4:	40012c00 	.word	0x40012c00
 80039c8:	40014400 	.word	0x40014400
 80039cc:	40014800 	.word	0x40014800
 80039d0:	ffffbfff 	.word	0xffffbfff

080039d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	2201      	movs	r2, #1
 80039ec:	4393      	bics	r3, r2
 80039ee:	001a      	movs	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	22f0      	movs	r2, #240	; 0xf0
 80039fe:	4393      	bics	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	220a      	movs	r2, #10
 8003a10:	4393      	bics	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	621a      	str	r2, [r3, #32]
}
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b006      	add	sp, #24
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	2210      	movs	r2, #16
 8003a42:	4393      	bics	r3, r2
 8003a44:	001a      	movs	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	4a0d      	ldr	r2, [pc, #52]	; (8003a90 <TIM_TI2_ConfigInputStage+0x60>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	031b      	lsls	r3, r3, #12
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	22a0      	movs	r2, #160	; 0xa0
 8003a6c:	4393      	bics	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	621a      	str	r2, [r3, #32]
}
 8003a86:	46c0      	nop			; (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b006      	add	sp, #24
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	ffff0fff 	.word	0xffff0fff

08003a94 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2270      	movs	r2, #112	; 0x70
 8003aa8:	4393      	bics	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	2207      	movs	r2, #7
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	609a      	str	r2, [r3, #8]
}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b004      	add	sp, #16
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	4a09      	ldr	r2, [pc, #36]	; (8003b04 <TIM_ETR_SetConfig+0x3c>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	021a      	lsls	r2, r3, #8
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	609a      	str	r2, [r3, #8]
}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b006      	add	sp, #24
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	ffff00ff 	.word	0xffff00ff

08003b08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	221f      	movs	r2, #31
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	409a      	lsls	r2, r3
 8003b1e:	0013      	movs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	43d2      	mvns	r2, r2
 8003b2a:	401a      	ands	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a1a      	ldr	r2, [r3, #32]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	211f      	movs	r1, #31
 8003b38:	400b      	ands	r3, r1
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4099      	lsls	r1, r3
 8003b3e:	000b      	movs	r3, r1
 8003b40:	431a      	orrs	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	621a      	str	r2, [r3, #32]
}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b006      	add	sp, #24
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	223c      	movs	r2, #60	; 0x3c
 8003b5e:	5c9b      	ldrb	r3, [r3, r2]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e042      	b.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	223c      	movs	r2, #60	; 0x3c
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	223d      	movs	r2, #61	; 0x3d
 8003b74:	2102      	movs	r1, #2
 8003b76:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2270      	movs	r2, #112	; 0x70
 8003b8c:	4393      	bics	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a14      	ldr	r2, [pc, #80]	; (8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00a      	beq.n	8003bc2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	05db      	lsls	r3, r3, #23
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d004      	beq.n	8003bc2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a0f      	ldr	r2, [pc, #60]	; (8003bfc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d10c      	bne.n	8003bdc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2280      	movs	r2, #128	; 0x80
 8003bc6:	4393      	bics	r3, r2
 8003bc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	223d      	movs	r2, #61	; 0x3d
 8003be0:	2101      	movs	r1, #1
 8003be2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	223c      	movs	r2, #60	; 0x3c
 8003be8:	2100      	movs	r1, #0
 8003bea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	0018      	movs	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b004      	add	sp, #16
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	40012c00 	.word	0x40012c00
 8003bfc:	40000400 	.word	0x40000400

08003c00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	223c      	movs	r2, #60	; 0x3c
 8003c12:	5c9b      	ldrb	r3, [r3, r2]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e03e      	b.n	8003c9a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	223c      	movs	r2, #60	; 0x3c
 8003c20:	2101      	movs	r1, #1
 8003c22:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	22ff      	movs	r2, #255	; 0xff
 8003c28:	4393      	bics	r3, r2
 8003c2a:	001a      	movs	r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4a1b      	ldr	r2, [pc, #108]	; (8003ca4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003c38:	401a      	ands	r2, r3
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4a18      	ldr	r2, [pc, #96]	; (8003ca8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003c46:	401a      	ands	r2, r3
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4a16      	ldr	r2, [pc, #88]	; (8003cac <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003c54:	401a      	ands	r2, r3
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4a13      	ldr	r2, [pc, #76]	; (8003cb0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8003c62:	401a      	ands	r2, r3
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4a11      	ldr	r2, [pc, #68]	; (8003cb4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8003c70:	401a      	ands	r2, r3
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4a0e      	ldr	r2, [pc, #56]	; (8003cb8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8003c7e:	401a      	ands	r2, r3
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	223c      	movs	r2, #60	; 0x3c
 8003c94:	2100      	movs	r1, #0
 8003c96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	b004      	add	sp, #16
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	fffffcff 	.word	0xfffffcff
 8003ca8:	fffffbff 	.word	0xfffffbff
 8003cac:	fffff7ff 	.word	0xfffff7ff
 8003cb0:	ffffefff 	.word	0xffffefff
 8003cb4:	ffffdfff 	.word	0xffffdfff
 8003cb8:	ffffbfff 	.word	0xffffbfff

08003cbc <__libc_init_array>:
 8003cbc:	b570      	push	{r4, r5, r6, lr}
 8003cbe:	2600      	movs	r6, #0
 8003cc0:	4d0c      	ldr	r5, [pc, #48]	; (8003cf4 <__libc_init_array+0x38>)
 8003cc2:	4c0d      	ldr	r4, [pc, #52]	; (8003cf8 <__libc_init_array+0x3c>)
 8003cc4:	1b64      	subs	r4, r4, r5
 8003cc6:	10a4      	asrs	r4, r4, #2
 8003cc8:	42a6      	cmp	r6, r4
 8003cca:	d109      	bne.n	8003ce0 <__libc_init_array+0x24>
 8003ccc:	2600      	movs	r6, #0
 8003cce:	f000 f821 	bl	8003d14 <_init>
 8003cd2:	4d0a      	ldr	r5, [pc, #40]	; (8003cfc <__libc_init_array+0x40>)
 8003cd4:	4c0a      	ldr	r4, [pc, #40]	; (8003d00 <__libc_init_array+0x44>)
 8003cd6:	1b64      	subs	r4, r4, r5
 8003cd8:	10a4      	asrs	r4, r4, #2
 8003cda:	42a6      	cmp	r6, r4
 8003cdc:	d105      	bne.n	8003cea <__libc_init_array+0x2e>
 8003cde:	bd70      	pop	{r4, r5, r6, pc}
 8003ce0:	00b3      	lsls	r3, r6, #2
 8003ce2:	58eb      	ldr	r3, [r5, r3]
 8003ce4:	4798      	blx	r3
 8003ce6:	3601      	adds	r6, #1
 8003ce8:	e7ee      	b.n	8003cc8 <__libc_init_array+0xc>
 8003cea:	00b3      	lsls	r3, r6, #2
 8003cec:	58eb      	ldr	r3, [r5, r3]
 8003cee:	4798      	blx	r3
 8003cf0:	3601      	adds	r6, #1
 8003cf2:	e7f2      	b.n	8003cda <__libc_init_array+0x1e>
 8003cf4:	08003de0 	.word	0x08003de0
 8003cf8:	08003de0 	.word	0x08003de0
 8003cfc:	08003de0 	.word	0x08003de0
 8003d00:	08003de4 	.word	0x08003de4

08003d04 <memset>:
 8003d04:	0003      	movs	r3, r0
 8003d06:	1812      	adds	r2, r2, r0
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d100      	bne.n	8003d0e <memset+0xa>
 8003d0c:	4770      	bx	lr
 8003d0e:	7019      	strb	r1, [r3, #0]
 8003d10:	3301      	adds	r3, #1
 8003d12:	e7f9      	b.n	8003d08 <memset+0x4>

08003d14 <_init>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1a:	bc08      	pop	{r3}
 8003d1c:	469e      	mov	lr, r3
 8003d1e:	4770      	bx	lr

08003d20 <_fini>:
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d26:	bc08      	pop	{r3}
 8003d28:	469e      	mov	lr, r3
 8003d2a:	4770      	bx	lr
